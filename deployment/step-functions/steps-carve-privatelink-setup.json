{
  "Comment": "Deploy Carve PrivateLink Service",
  "StartAt": "PrivateLinkCoreRegion",
  "States": {
    "PrivateLinkCoreRegion": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "${FunctionSfPrivateLinkCore}",
        "Payload": {
          "Input.$": "$"
        }
      },
      "Retry": [
        {
          "ErrorEquals": [ 
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 7,
          "BackoffRate": 2
        }
      ],
      "ResultSelector": {
        "Payload.$": "States.StringToJson($.Payload)"
      },
      "Next": "PrivateLinkCoreRegionStack",
      "TimeoutSeconds": 900
    },
    "PrivateLinkCoreRegionStack": {
      "Type": "Task",
      "Next": "PrivateLinkRegions",
      "Resource": "arn:aws:states:::states:startExecution.sync",
      "Parameters": {
        "StateMachineArn": "${CarveDeployStacksStepFunction}",
        "Input": {
          "AWS_STEP_FUNCTIONS_STARTED_BY_EXECUTION_ID.$": "$$.Execution.Id",
          "Input.$": "$.Payload"
        }
      }
    },
    "PrivateLinkRegions": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "${FunctionSfPrivateLinkRegions}",
        "Payload": {
          "Input.$": "$",
          "graph.$": "$$.Execution.Input.graph"
        }
      },
      "ResultSelector": {
        "Payload.$": "States.StringToJson($.Payload)"
      },
      "Retry": [
        {
          "ErrorEquals": [ 
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 7,
          "BackoffRate": 2
        }
      ],
      "Next": "PrivateLinkRegionalStacks",
      "TimeoutSeconds": 900
    },
    "PrivateLinkRegionalStacks": {
      "Type": "Task",
      "Next": "UpdateCorePeeringRoutes",
      "Resource": "arn:aws:states:::states:startExecution.sync",
      "Parameters": {
        "StateMachineArn": "${CarveDeployStacksStepFunction}",
        "Input": {
          "AWS_STEP_FUNCTIONS_STARTED_BY_EXECUTION_ID.$": "$$.Execution.Id",
          "Input.$": "$.Payload"
        }
      }
    },
    "UpdateCorePeeringRoutes": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "${FunctionSfPrivateLinkCore}",
        "Payload": {
          "Input.$": "$",
          "graph.$": "$$.Execution.Input.graph"
        }
      },
      "ResultSelector": {
        "Payload.$": "States.StringToJson($.Payload)"
      },
      "Retry": [
        {
          "ErrorEquals": [ 
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 7,
          "BackoffRate": 2
        }
      ],
      "Next": "PrivateLinkCoreRegionStackRoutes",
      "TimeoutSeconds": 900
    },
    "PrivateLinkCoreRegionStackRoutes": {
      "Type": "Task",
      "End": true,
      "Resource": "arn:aws:states:::states:startExecution.sync",
      "Parameters": {
        "StateMachineArn": "${CarveDeployStacksStepFunction}",
        "Input": {
          "AWS_STEP_FUNCTIONS_STARTED_BY_EXECUTION_ID.$": "$$.Execution.Id",
          "Input.$": "$.Payload"
        }
      }
    }
  }
}
