{
  "Comment": "Cleanup Carve Managed Stacks",
  "StartAt": "Initialize",
  "States": {
    "Initialize": {
      "Type": "Task",
      "Resource":"arn:aws:states:::lambda:invoke",
      "Retry": [
        {
          "ErrorEquals": [ 
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 7,
          "BackoffRate": 2
        }
      ],
      "Parameters": {
        "FunctionName": "${FunctionSfCleanupInitialize}",
        "Payload": {
          "Input.$": "$"
        }
      },
      "Next": "DiscoverCarveStacks",
      "TimeoutSeconds": 900
    },
    "DiscoverCarveStacks": {
      "Type": "Map",
      "Next": "OrganizeResults",
      "MaxConcurrency": 100,
      "ItemsPath": "$.Payload",
      "Iterator": {
        "StartAt": "DiscoverAccountStacks",
        "States": {
          "DiscoverAccountStacks": {
            "Type": "Task",
            "Resource":"arn:aws:states:::lambda:invoke",
            "Retry": [
              {
                "ErrorEquals": [ 
                  "Lambda.ServiceException",
                  "Lambda.AWSLambdaException",
                  "Lambda.SdkClientException",
                  "States.Timeout"
                ],
                "IntervalSeconds": 1,
                "MaxAttempts": 7,
                "BackoffRate": 2
              }
            ],      
            "Parameters": {
              "FunctionName": "${FunctionSfCleanupDiscover}",
              "Payload": {
                "Input.$": "$"
              }
            },
            "ResultSelector": {
              "Payload.$": "$.Payload"
            },
            "End": true,
            "TimeoutSeconds": 60
          }
        }
      }
    },
    "OrganizeResults": {
      "Type": "Task",
      "Resource":"arn:aws:states:::lambda:invoke",
      "Retry": [
        {
          "ErrorEquals": [ 
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 7,
          "BackoffRate": 2
        }
      ],
      "Parameters": {
        "FunctionName": "${FunctionSfCleanupOrganize}",
        "Payload": {
          "Input.$": "$"
        }
      },
      "Next": "DeleteStacksIterator",
      "TimeoutSeconds": 20
    },
    "DeleteStacksIterator": {
      "Type": "Map",
      "End": true,
      "MaxConcurrency": 0,
      "ItemsPath": "$.Payload",
      "Iterator": {
        "StartAt": "DeleteStack",
        "States": {
          "DeleteStack": {
            "Type": "Task",
            "Resource":"arn:aws:states:::lambda:invoke",
            "Retry": [
              {
                "ErrorEquals": [ 
                  "Lambda.ServiceException",
                  "Lambda.AWSLambdaException",
                  "Lambda.SdkClientException"
                ],
                "IntervalSeconds": 1,
                "MaxAttempts": 7,
                "BackoffRate": 2
              }
            ],      
            "Parameters": {
              "FunctionName": "${FunctionSfCleanupDeleteStack}",
              "Payload": {
                "Input.$": "$"
              }
            },
            "Next": "DescribeDeleteStack",
            "TimeoutSeconds": 20
          },
          "DescribeDeleteStack": {
            "Type": "Task",
            "Resource":"arn:aws:states:::lambda:invoke",
            "Retry": [
              {
                "ErrorEquals": [ 
                  "Lambda.ServiceException",
                  "Lambda.AWSLambdaException",
                  "Lambda.SdkClientException"
                ],
                "IntervalSeconds": 1,
                "MaxAttempts": 7,
                "BackoffRate": 2
              }
            ],      
            "Parameters": {
              "FunctionName": "${FunctionSfStacksDescribeStack}",
              "Payload": {
                "Input.$": "$"
              }
            },
            "Next": "DeleteStackStatusChoice",
            "TimeoutSeconds": 30
          },
          "DeleteStackWait": {
            "Type": "Wait",
            "Seconds": 10,
            "Next": "DescribeDeleteStack"
          },
          "DeleteFailure": {
            "Type": "Fail"
          },
          "DeleteSucceed": {
            "Type": "Succeed"
          },
          "DeleteStackStatusChoice": {
            "Type": "Choice",
            "InputPath": "$.Payload",
            "Choices": [
              {
                "Variable": "$.StackStatus",
                "StringEquals": "DELETE_COMPLETE",
                "Next": "DeleteSucceed"
              },
              {
                "Or": [
                  {
                    "Variable": "$.StackStatus",
                    "StringEquals": "DELETE_PENDING"
                  },
                  {
                    "Variable": "$.StackStatus",
                    "StringEquals": "DELETE_IN_PROGRESS"
                  }
                ],
                "Next": "DeleteStackWait"
              },
              {
                "Or": [
                  {
                    "Variable": "$.StackStatus",
                    "StringEquals": "CREATE_COMPLETE"
                  },
                  {
                    "Variable": "$.StackStatus",
                    "StringEquals": "CREATE_IN_PROGRESS"
                  },
                  {
                    "Variable": "$.StackStatus",
                    "StringEquals": "CREATE_PENDING"
                  },
                  {
                    "Variable": "$.StackStatus",
                    "StringEquals": "DELETE_FAILED"
                  },
                  {
                    "Variable": "$.StackStatus",
                    "StringEquals": "FAILED"
                  }
                ],
                "Next": "DeleteFailure"
              }
            ]
          }
        }
      }
    }
  }
}
