{
  "Comment": "Create Carve Beacon Stacks",
  "StartAt": "BeaconDeployPrep",
  "States": {
    "BeaconDeployPrep": {
      "Type": "Task",
      "Resource":"arn:aws:states:::lambda:invoke",
      "ResultSelector": {
        "Payload.$": "States.StringToJson($.Payload)"
      },
      "Parameters": {
        "FunctionName": "${CarveFunction}",
        "Payload": {
          "DeployAction": "BeaconDeployPrep",
          "Input.$": "$"
        }
      },
      "Next": "DeployPrepCheck",
      "TimeoutSeconds": 900
    },
    "DeployPrepCheck": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "ResultSelector": {
        "Payload.$": "States.StringToJson($.Payload)"
      },
      "Parameters": {
        "FunctionName": "${CarveFunction}",
        "Payload": {
          "DeployAction": "DeployPrepCheck",
          "Input.$": "$"
        }
      },
      "Next": "DeployPrepCheckChoice",
      "TimeoutSeconds": 30
    },
    "ImageStatusWait": {
      "Type": "Wait",
      "Seconds": 30,
      "Next": "DeployPrepCheck"
    },
    "Failure": {
      "Type": "Fail"
    },
    "DeployPrepCheckChoice": {
      "Type": "Choice",
      "InputPath": "$.Payload",
      "Choices": [
        {
          "Variable": "$.ImageStatus",
          "StringEquals": "complete",
          "Next": "GetDeploymentList"
        },
        {
          "Variable": "$.ImageStatus",
          "StringEquals": "pending",
          "Next": "ImageStatusWait"
        },
        {
          "Variable": "$.ImageStatus",
          "StringEquals": "failure",
          "Next": "Failure"
        }
      ]
    },
    "GetDeploymentList": {
      "Type": "Task",
      "Resource":"arn:aws:states:::lambda:invoke",
      "ResultSelector": {
        "Payload.$": "States.StringToJson($.Payload)"
      },
      "Parameters": {
        "FunctionName": "${CarveFunction}",
        "Payload": {
          "DeployAction": "GetDeploymentList"
        }
      },
      "Next": "DeployCarveBeacons",
      "TimeoutSeconds": 900
    },
    "DeployCarveBeacons": {
      "Comment": "Create one Carve stack per VPC",
      "Type": "Task",
      "Next": "CleanupResources",
      "Resource": "arn:aws:states:::states:startExecution.sync",
      "Parameters": {
        "StateMachineArn": "${CarveDeployStacksStepFunction}",
        "Input": {
          "AWS_STEP_FUNCTIONS_STARTED_BY_EXECUTION_ID.$": "$$.Execution.Id",
          "Input.$": "$.Payload"
        }
      }
    },
    "CleanupResources": {
      "Comment": "Cleanup Carve resources",
      "Type": "Task",
      "Next": "DeploymentComplete",
      "Resource": "arn:aws:states:::states:startExecution.sync",
      "Parameters": {
        "StateMachineArn": "${CarveCleanupStepFunction}",
        "Input": {
          "AWS_STEP_FUNCTIONS_STARTED_BY_EXECUTION_ID.$": "$$.Execution.Id"
        }
      }
    },
    "DeploymentComplete": {
      "Comment": "Perform final tasks",
      "Type": "Task",
      "Resource":"arn:aws:states:::lambda:invoke",
      "ResultSelector": {
        "Payload.$": "States.StringToJson($.Payload)"
      },
      "Parameters": {
        "FunctionName": "${CarveFunction}",
        "Payload": {
          "DeployAction": "DeploymentComplete",
          "Input.$": "$"
        }
      },
      "End": true,
      "TimeoutSeconds": 900
    },
  }
}
