AWSTemplateFormatVersion: '2010-09-09'
Description: VPC Endpoint service stack.

Parameters:
  OrganizationsId:
    Type: String
    Description: AWS Organizations Id
    Default: ""
  MinSize:
    Description: Minimum number of instances in the ASG
    Type: Number
    Default: '0'
  MaxSize:
    Description: Maximum number of instances in the ASG
    Type: Number
    Default: '3'
  DesiredSize:
    Description: Desored number of instances in the ASG
    Type: Number
    Default: '1'
  ImageId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    # Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-minimal-hvm-arm64-ebs'
    Default: '/test-carve-resources/carve-beacon-ami'
    Description: The source ImageId of Amazon AMI to use
  Prefix:
    Type: String
    Description: "Prefix carve AWS resources and stacknames with this"
    Default: "test-"
  InternetAccess:
    Type: String
    Description: "true|false Allow internet access to the instances"
    Default: "true"

Conditions:
  InternetAccess:
    Fn::Equals:
      - !Ref InternetAccess
      - "true"
  NoInternetAccess:
    Fn::Equals:
      - !Ref InternetAccess
      - "false"

Resources:

  EndpointService:
    Type: AWS::EC2::VPCEndpointService
    Properties:
      # will want to require acceptance and make a workflow for this
      AcceptanceRequired: False
      NetworkLoadBalancerArns:
        - !Ref EndpointServiceNLB

  EndpointServiceNLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub ${Prefix}carve-endpoint-nlb
      Type: network
      Scheme: internal
      Subnets:
        - !Ref PrivateSubnetA
        - !Ref PrivateSubnetB
        - !Ref PrivateSubnetC
      LoadBalancerAttributes:
        - Key: deletion_protection.enabled
          Value: "false"
        - Key: load_balancing.cross_zone.enabled
          Value: "true"
        - Key: access_logs.s3.enabled
          Value: "false"
        # - Key: access_logs.s3.bucket
        #   Value: !Ref LogBucketName
        # - Key: access_logs.s3.prefix
        #   Value: endpointservice-NLB

  EndpointServiceNLBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
          - Type: forward
            TargetGroupArn: !Ref EndpointServiceNLBTargetGroup
      LoadBalancerArn: !Ref EndpointServiceNLB
      Port: 80
      Protocol: TCP

  EndpointServiceNLBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${Prefix}carve-target-group
      Port: 80
      Protocol: TCP
      VpcId: !Ref VPC
      HealthCheckProtocol : HTTP
      HealthCheckIntervalSeconds: 30
      HealthyThresholdCount: 3
      UnhealthyThresholdCount: 3
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: "90"

  EndpointServicePermissions:
    Type: AWS::EC2::VPCEndpointServicePermissions
    Properties:
      AllowedPrincipals:
        - !Sub arn:aws:iam::${AWS::AccountId}:root
      ServiceId: !Ref EndpointService

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    CreationPolicy:
      ResourceSignal:
        Timeout: PT5M
        Count: !Ref MinSize
    Properties:
      MaxInstanceLifetime: 1209600 # 14 days
      AutoScalingGroupName: !Sub ${Prefix}carve-endpoint-asg
      LaunchConfigurationName: !Ref LaunchConfig
      VPCZoneIdentifier:
        - !Ref PrivateSubnetA
        - !Ref PrivateSubnetB
        - !Ref PrivateSubnetC
      HealthCheckGracePeriod: '60'
      HealthCheckType: EC2
      MinSize: !Ref MinSize
      MaxSize: !Ref MaxSize
      MetricsCollection:
        - Granularity: 1Minute
      TargetGroupARNs:
        - !Ref EndpointServiceNLBTargetGroup
      Tags:
        - Key: Name
          Value: !Sub ${Prefix}carve-privatelink-asg
          PropagateAtLaunch: true

  LaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      SecurityGroups:
        - !Ref 'InstanceSecurityGroup'
      IamInstanceProfile: !Ref 'InstanceProfile'
      ImageId: !Ref 'ImageId'
      InstanceMonitoring: 'false'
      InstanceType: t4g.nano
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            # gp3 = $.64/subnet/month
            # st1 = $.36/subnet/month but slow
            VolumeType: gp3
            VolumeSize: '8'
            DeleteOnTermination: 'true'
            Encrypted: 'true'

  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Carve EC2 ingress
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
          Description: Allow traffic from the NLB (which has no security group and is a pass-through)

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref 'InstanceRole'

  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${Prefix}carve-endpoint-ec2-role"
      Path: /
      ManagedPolicyArns:
        - !Sub arn:${AWS::Partition}:iam::aws:policy/AmazonSSMManagedInstanceCore
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: "Allow"
          Principal:
            Service:
              - "ec2.amazonaws.com"
          Action:
            - "sts:AssumeRole"

###################################
## Below here are resources to create a small private VPC to host the carve
## PrivateLink stack

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/24
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub ${Prefix}carve-privatelink-vpc

  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: 10.0.0.0/27
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${Prefix}carve-privatelink-subnet-a

  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: 10.0.0.32/27
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${Prefix}carve-privatelink-subnet-b

  PrivateSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      CidrBlock: 10.0.0.64/27
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${Prefix}carve-privatelink-subnet-c

  PublicNATSubnet:
    Condition: InternetAccess
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 3, !GetAZs '' ]
      CidrBlock: 10.0.0.96/27
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${Prefix}carve-privatelink-subnet-public-nat


# enable internet access if configured

  InternetGateway:
    Condition: InternetAccess
    Type: AWS::EC2::InternetGateway
    DependsOn: VPC

  AttachGateway:
    Condition: InternetAccess
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref 'VPC'
      InternetGatewayId: !Ref 'InternetGateway'

  NatPublicIP:
    Condition: InternetAccess
    Type: AWS::EC2::EIP
    DependsOn: VPC
    Properties:
      Domain: vpc
      
  NatGateway:
    Condition: InternetAccess
    Type: AWS::EC2::NatGateway
    DependsOn: NatPublicIP
    Properties: 
      SubnetId: !Ref PublicNATSubnet
      AllocationId: !GetAtt NatPublicIP.AllocationId

  PublicRoutingTable:
    Condition: InternetAccess
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Public

  PublicRoute:
    Condition: InternetAccess
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      GatewayId: !Ref 'InternetGateway'
      DestinationCidrBlock: '0.0.0.0/0'
      RouteTableId: !Ref 'PublicRoutingTable'

  PrivateRoutingTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Private

  PrivateRoute:
    Condition: InternetAccess
    Type: AWS::EC2::Route
    DependsOn: NatGateway
    Properties:
      NatGatewayId: !Ref NatGateway
      DestinationCidrBlock: '0.0.0.0/0'
      RouteTableId: !Ref 'PrivateRoutingTable'

  RoutingTableAssociationA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'PrivateSubnetA'
      RouteTableId: !Ref 'PrivateRoutingTable'

  RoutingTableAssociationB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'PrivateSubnetB'
      RouteTableId: !Ref 'PrivateRoutingTable'

  RoutingTableAssociationC:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'PrivateSubnetC'
      RouteTableId: !Ref 'PrivateRoutingTable'

  RoutingTableAssociationPublicNAT:
    Condition: InternetAccess
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'PublicNATSubnet'
      RouteTableId: !Ref 'PublicRoutingTable'

Outputs:
  EndpointService:
    Value: !Ref 'EndpointService'