AWSTemplateFormatVersion: "2010-09-09"
Description: Core Organization Resources for Carve

Parameters:
  
  OrganizationsId:
    Type: String
    Description: AWS Organizations Id
    Default: ""
  CodeBucket:
    Type: String
    Default: ""
    Description: S3 Bucket with Carve lambda zip package
  GITSHA:
    Type: String
    Default: ""
    Description: latest Git commit SHA determines S3 artifact paths
  ResourcePrefix:
    Type: String
    Description: "Prefix all carve resources with this"
    Default: ""
  CarveVersion:
    Type: String
    Default: "0"

Resources:

  CarveFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${ResourcePrefix}carve-${OrganizationsId}"
      Description: Continuous AWS Route Verification Engine
      Code:
        S3Bucket: !Ref CodeBucket
        S3Key: !Sub "lambda_packages/${GITSHA}/package.zip"
      Environment:
        Variables:
          OrganizationsId: !Ref OrganizationsId
          CarveS3Bucket: !Sub "${ResourcePrefix}carve-${OrganizationsId}-${AWS::Region}"
          CodeBucket: !Ref CodeBucket
          CodeKey: !Sub "lambda_packages/${GITSHA}/package.zip"
          GITSHA: !Ref GITSHA
          CarveSNSTopicArn: !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:${SNSTopic}"
          MPLCONFIGDIR: /tmp/matplotlib
          ResourcePrefix: !Ref ResourcePrefix
          CleanupStateMachine: !Sub "arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:${ResourcePrefix}carve-cleanup-statemachine"
          DeployEndpointsStateMachine: !Sub "arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:${ResourcePrefix}carve-deploy-endpoints-statemachine"
          DeployStacksStateMachine: !Sub "arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:${ResourcePrefix}carve-deploy-stacks-statemachine"
          DiscoveryStateMachine: !Sub arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:${ResourcePrefix}carve-discovery-statemachine"
          CarveVersion: !Ref CarveVersion
      Handler: c_entrypoint.lambda_handler
      Runtime: python3.8
      MemorySize: 1024
      Timeout: 120
      Role: !Sub "arn:aws:iam::${AWS::AccountId}:role/${ResourcePrefix}carve-lambda-${OrganizationsId}"
      ReservedConcurrentExecutions: 200
      Layers:
        - !Ref CarveRequirementsLayer
        # AWS provided lambda layer for scipy and numpy
        - !Sub "arn:aws:lambda:${AWS::Region}:668099181075:layer:AWSLambda-Python38-SciPy1x:29"
        # public lambda layer for matplotlib from Klayers
        - !Sub "arn:aws:lambda:${AWS::Region}:770693421928:layer:Klayers-python38-matplotlib:21"

  CarveRequirementsLayer:
    Type: AWS::Lambda::LayerVersion
    Properties: 
      CompatibleRuntimes:
        - python3.8
      Content: 
        S3Bucket: !Ref CodeBucket
        # S3Key: !Sub "requirements_packages/${GITSHA}/requirements_package.zip"
        S3Key: !Sub "requirements_packages/b1381f2c51b3877528a5d14436f4267a45071946/requirements_package.zip"
      Description: "Carve python requirements"
      LayerName: CarveRequirementsLayer

  CarveSNSSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: !GetAtt CarveFunction.Arn
      Protocol: Lambda
      TopicArn: !Ref SNSTopic

  CarveLambdaSNSInvoke:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      Principal: sns.amazonaws.com
      SourceArn: !Ref SNSTopic
      FunctionName: !GetAtt CarveFunction.Arn


  CarveDeployStacksStepFunction:
    Type: AWS::StepFunctions::StateMachine
    Properties: 
      DefinitionS3Location: 
        Bucket: !Ref CodeBucket
        Key: !Sub "step_functions/${GITSHA}/steps-carve-deploy-stacks.json"
      DefinitionSubstitutions: 
        CarveFunction: !Ref CarveFunction
      RoleArn: !Sub "arn:aws:iam::${AWS::AccountId}:role/${ResourcePrefix}carve-stepfunctions-${OrganizationsId}"
      StateMachineName: !Sub "${ResourcePrefix}carve-deploy-stacks-statemachine"
      StateMachineType: STANDARD


  CarveDeployEndpointsStepFunction:
    Type: AWS::StepFunctions::StateMachine
    Properties: 
      DefinitionS3Location: 
        Bucket: !Ref CodeBucket
        Key: !Sub "step_functions/${GITSHA}/steps-carve-deploy-endpoints.json"
      DefinitionSubstitutions: 
        CarveFunction: !Ref CarveFunction
        CarveDeployStacksStepFunction: !Ref CarveDeployStacksStepFunction
      RoleArn: !Sub "arn:aws:iam::${AWS::AccountId}:role/${ResourcePrefix}carve-stepfunctions-${OrganizationsId}"
      StateMachineName: !Sub "${ResourcePrefix}carve-deploy-endpoints-statemachine"
      StateMachineType: STANDARD

  # CarveCleanupStepFunction:
  #   Type: AWS::StepFunctions::StateMachine
  #   Properties: 
  #     DefinitionS3Location: 
  #       Bucket: !Ref CodeBucket
  #       Key: !Sub "step_functions/${GITSHA}/steps-carve-cleanup.json"
  #     DefinitionSubstitutions: 
  #       CarveFunction: !Ref CarveFunction
  #     RoleArn: !Sub "arn:aws:iam::${AWS::AccountId}:role/${ResourcePrefix}carve-stepfunctions-${OrganizationsId}"
  #     StateMachineName: !Sub "${ResourcePrefix}carve-cleanup-statemachine"
  #     StateMachineType: STANDARD

  CarveDiscoveryStepFunction:
    Type: AWS::StepFunctions::StateMachine
    Properties: 
      DefinitionS3Location: 
        Bucket: !Ref CodeBucket
        Key: !Sub "step_functions/${GITSHA}/steps-carve-discovery.json"
      DefinitionSubstitutions: 
        CarveFunction: !Ref CarveFunction
      RoleArn: !Sub "arn:aws:iam::${AWS::AccountId}:role/${ResourcePrefix}carve-stepfunctions-${OrganizationsId}"
      StateMachineName: !Sub "${ResourcePrefix}carve-discovery-statemachine"
      StateMachineType: STANDARD


  StepFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${ResourcePrefix}carve-stepfunctions-${OrganizationsId}"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: "Allow"
          Action: sts:AssumeRole
          Principal:
            Service:
              - !Sub "states.${AWS::Region}.amazonaws.com"
      Policies:
        - PolicyName: StatesExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "lambda:InvokeFunction"
                Resource:
                  - !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${ResourcePrefix}carve-*"
              - Effect: Allow
                Action:
                  - events:PutTargets
                  - events:PutRule
                  - events:DescribeRule
                Resource: 
                  - !Sub arn:${AWS::Partition}:events:${AWS::Region}:${AWS::AccountId}:rule/StepFunctionsGetEventsForStepFunctionsExecutionRule
              - Effect: Allow
                Action:
                  - states:StartExecution
                  - states:Describe*
                  - states:Get*
                  - states:List*
                Resource:
                  - !Sub "arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:${ResourcePrefix}carve-*-statemachine"

  CarveS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${ResourcePrefix}carve-${OrganizationsId}-${AWS::Region}"
      VersioningConfiguration:
        Status: Enabled
      AccessControl: Private
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: 'AES256'


  S3InvokeCarvePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt CarveFunction.Arn
      Principal: s3.amazonaws.com
      SourceArn: !Sub "arn:aws:s3:::${ResourcePrefix}carve-${OrganizationsId}-${AWS::Region}"


  # SetupCarveBucket:
  #   Type: Custom::SetupCarveBucket
  #   Properties:
  #     ServiceToken:  !GetAtt CarveFunction.Arn 
  #     Bucket: !Ref CarveS3Bucket
  #     DeployEventPath: deploy_input/
  #     NotificationId: CarveDeploy


  # DeleteStackCleanup:
  #   # delete any associated carve endpoint stacks if this stack is deleted
  #   Type: Custom::DeleteStackCleanup
  #   Properties:
  #     ServiceToken:  !GetAtt CarveFunction.Arn 
  #     OrganizationsId: !Ref OrganizationsId
  #     ResourcePrefix: !Ref ResourcePrefix
  #     CarveS3Bucket: !Ref CarveS3Bucket


  CarveS3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref CarveS3Bucket
      PolicyDocument:
        Statement:
          - Sid: CarveCoreLambda
            Effect: Allow 
            Action:
              - "s3:*"
            Resource: !GetAtt CarveS3Bucket.Arn
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:role/${ResourcePrefix}carve-lambda-${OrganizationsId}"
          - Sid: DeploymentAccess
            Effect: Allow
            Action:
              - "s3:*"
            Principal: "*"
            Resource: !GetAtt CarveS3Bucket.Arn
            Condition:
              StringEquals:
                aws:PrincipalOrgID: !Ref OrganizationsId
              # ArnLike:
              #   aws:SourceArn: !Sub "arn:aws:lambda:*:*:function:${ResourcePrefix}carve-o-*"

  SNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: !Sub "${ResourcePrefix}carve-events-${OrganizationsId}"
      TopicName: !Sub "${ResourcePrefix}carve-events-${OrganizationsId}"


  TopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      Topics:
        - !Ref SNSTopic
      PolicyDocument:
        Id: Carve SNS Policy
        Version: "2012-10-17"
        Statement:
          - Sid: Allow Org Carve Lambdas
            Effect: "Allow"
            Principal:
              AWS: "*"
            Action:
              - "sns:Subscribe"
              - "sns:Receive"
              - "sns:Publish"
            Resource: !Ref SNSTopic
            Condition:
              StringEquals:
                aws:PrincipalOrgID: !Ref OrganizationsId
              ArnLike:
                AWS:SourceArn: "arn:aws:lambda:*:*:function:${ResourcePrefix}carve-*"


 # CloudWatchInvokeLambda:
 #    Type: AWS::Lambda::Permission
 #    Properties:
 #      FunctionName: !Ref CraveFunction
 #      Action: "lambda:InvokeFunction"
 #      Principal: "events.amazonaws.com"
 #      SourceArn: !GetAtt ScheduleRule.Arn

 #  CloudWatchRole:
 #    Type: AWS::IAM::Role
 #    Properties:
 #      AssumeRolePolicyDocument:
 #        Version: "2012-10-17"
 #        Statement:
 #        - Effect: "Allow"
 #          Principal:
 #            Service:
 #              - "events.amazonaws.com"
 #          Action:
 #            - "sts:AssumeRole"
 #      Policies:
 #        - PolicyName: LambdaInvocation
 #          PolicyDocument:
 #            Version: "2012-10-17"
 #            Statement:
 #              - Effect: Allow
 #                Action:
 #                  - lambda:Invoke*
 #                Resource:
 #                  - !GetAtt CraveFunction.arn

 #  ScheduleRule:
 #    Type: AWS::Events::Rule
 #    Properties:
 #      Description: execute VPC route test every minute
 #      RoleArn: !GetAtt CloudWatchRole.Arn
 #      ScheduleExpression:  "cron(* * * * *)"  # Every Minute
 #      State: ENABLED
 #      Targets:
 #        - Arn: !GetAtt CraveFunction.Arn
 #          Id: !Ref CraveFunction


Outputs:
  CarveTopicArn:
    Description: Carve Events Topic ARN
    Value: !Ref SNSTopic
    Export:
      Name: !Sub "${AWS::StackName}:TopicArn"
