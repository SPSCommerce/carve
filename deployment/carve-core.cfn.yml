AWSTemplateFormatVersion: "2010-09-09"
Description: Core Organization Resources for Carve

Parameters:
  
  OrgId:
    Type: String
    Description: AWS Organizations Id
    Default: ""
  UniqueId:
    Type: String
    Description: A unique id may be used instead of OrgId on buckets
    Default: ""
  CodeBucket:
    Type: String
    Default: ""
    Description: S3 Bucket with Carve lambda zip package
  GITSHA:
    Type: String
    Default: ""
    Description: latest Git commit SHA determines S3 artifact paths
  Prefix:
    Type: String
    Description: "Prefix carve AWS resources and stacknames with this"
    Default: ""
  CarveVersion:
    Type: String
    Default: "0"
  PropogateUpdates:
    Type: String
    Default: 'True'
    Description: Automatically propogate version updates to managed resources 
  IMAGETAG: 
    Type: 'String'
    Default: '0'
    Description: Version of carve image in ECR
  ECR:
    Type: 'String'
    Default: carve-repository
    Description: ECR Repo Name

Conditions:
  UseOrgId: !Equals [ !Ref "UniqueId", "" ]


Resources:

  # To help manage the repetitiveness of the carve lambda resources, we use nested stacks for each lambda function.
  #   * Duplicate this nested stack resource for each function, only changing the HandlerFile parameter.
  #   * Name the resource FunctionCamelCasePythonFile, so sf_scale_initialize.py is FunctionSfScaleInitialize
  FunctionEntrypoint:
    Type: AWS::CloudFormation::Stack
    Properties: 
      Parameters:
        HandlerFile: entrypoint
        # params below are the same for all nested lambda stacks
        CarveVersion: !Ref CarveVersion
        CodeBucket: !Ref CodeBucket
        ECR: !Ref ECR
        IMAGETAG: !Ref IMAGETAG
        OrgId: !Ref OrgId
        OrgSNSTopic: !Ref OrgSNSTopic
        Prefix: !Ref Prefix
        PropogateUpdates: !Ref PropogateUpdates
        UniqueId: !Ref UniqueId
        RoleArn: !GetAtt CarveCoreRole.Arn
      TemplateURL: !Sub "https://s3.amazonaws.com/${CodeBucket}/nested-templates/${GITSHA}/carve-core-lambda.cfn.yml"
      TimeoutInMinutes: 5

  FunctionSfPrivateLinkCore:
    Type: AWS::CloudFormation::Stack
    Properties: 
      Parameters:
        HandlerFile: sf_privatelink_core
        # params below are the same for all nested lambda stacks
        CarveVersion: !Ref CarveVersion
        CodeBucket: !Ref CodeBucket
        ECR: !Ref ECR
        IMAGETAG: !Ref IMAGETAG
        OrgId: !Ref OrgId
        OrgSNSTopic: !Ref OrgSNSTopic
        Prefix: !Ref Prefix
        PropogateUpdates: !Ref PropogateUpdates
        UniqueId: !Ref UniqueId
        RoleArn: !GetAtt CarveCoreRole.Arn
      TemplateURL: !Sub "https://s3.amazonaws.com/${CodeBucket}/nested-templates/${GITSHA}/carve-core-lambda.cfn.yml"
      TimeoutInMinutes: 5

  FunctionSfPrivateLinkRegions:
    Type: AWS::CloudFormation::Stack
    Properties: 
      Parameters:
        HandlerFile: sf_privatelink_regions
        # params below are the same for all nested lambda stacks
        CarveVersion: !Ref CarveVersion
        CodeBucket: !Ref CodeBucket
        ECR: !Ref ECR
        IMAGETAG: !Ref IMAGETAG
        OrgId: !Ref OrgId
        OrgSNSTopic: !Ref OrgSNSTopic
        Prefix: !Ref Prefix
        PropogateUpdates: !Ref PropogateUpdates
        UniqueId: !Ref UniqueId
        RoleArn: !GetAtt CarveCoreRole.Arn
      TemplateURL: !Sub "https://s3.amazonaws.com/${CodeBucket}/nested-templates/${GITSHA}/carve-core-lambda.cfn.yml"
      TimeoutInMinutes: 5

  # FunctionSfScaleInitialize:
  #   Type: AWS::CloudFormation::Stack
  #   Properties: 
  #     Parameters:
  #       HandlerFile: sf_scale_initialize
  #       # params below are the same for all nested lambda stacks
  #       CarveVersion: !Ref CarveVersion
  #       CodeBucket: !Ref CodeBucket
  #       ECR: !Ref ECR
  #       IMAGETAG: !Ref IMAGETAG
  #       OrgId: !Ref OrgId
  #       OrgSNSTopic: !Ref OrgSNSTopic
  #       Prefix: !Ref Prefix
  #       PropogateUpdates: !Ref PropogateUpdates
  #       UniqueId: !Ref UniqueId
  #       RoleArn: !GetAtt CarveCoreRole.Arn
  #     TemplateURL: !Sub "https://s3.amazonaws.com/${CodeBucket}/nested-templates/${GITSHA}/carve-core-lambda.cfn.yml"
  #     TimeoutInMinutes: 5

  # FunctionSfScaleUpdateAsg:
  #   Type: AWS::CloudFormation::Stack
  #   Properties: 
  #     Parameters:
  #       HandlerFile: sf_scale_update_asg
  #       # params below are the same for all nested lambda stacks
  #       CarveVersion: !Ref CarveVersion
  #       CodeBucket: !Ref CodeBucket
  #       ECR: !Ref ECR
  #       IMAGETAG: !Ref IMAGETAG
  #       OrgId: !Ref OrgId
  #       OrgSNSTopic: !Ref OrgSNSTopic
  #       Prefix: !Ref Prefix
  #       PropogateUpdates: !Ref PropogateUpdates
  #       UniqueId: !Ref UniqueId
  #       RoleArn: !GetAtt CarveCoreRole.Arn
  #     TemplateURL: !Sub "https://s3.amazonaws.com/${CodeBucket}/nested-templates/${GITSHA}/carve-core-lambda.cfn.yml"
  #     TimeoutInMinutes: 5

  # FunctionSfScaleCheckAsg:
  #   Type: AWS::CloudFormation::Stack
  #   Properties: 
  #     Parameters:
  #       HandlerFile: sf_scale_check_asg
  #       # params below are the same for all nested lambda stacks
  #       CarveVersion: !Ref CarveVersion
  #       CodeBucket: !Ref CodeBucket
  #       ECR: !Ref ECR
  #       IMAGETAG: !Ref IMAGETAG
  #       OrgId: !Ref OrgId
  #       OrgSNSTopic: !Ref OrgSNSTopic
  #       Prefix: !Ref Prefix
  #       PropogateUpdates: !Ref PropogateUpdates
  #       UniqueId: !Ref UniqueId
  #       RoleArn: !GetAtt CarveCoreRole.Arn
  #     TemplateURL: !Sub "https://s3.amazonaws.com/${CodeBucket}/nested-templates/${GITSHA}/carve-core-lambda.cfn.yml"
  #     TimeoutInMinutes: 5

  # FunctionSfScaleFinalize:
  #   Type: AWS::CloudFormation::Stack
  #   Properties: 
  #     Parameters:
  #       HandlerFile: sf_scale_finalize
  #       # params below are the same for all nested lambda stacks
  #       CarveVersion: !Ref CarveVersion
  #       CodeBucket: !Ref CodeBucket
  #       ECR: !Ref ECR
  #       IMAGETAG: !Ref IMAGETAG
  #       OrgId: !Ref OrgId
  #       OrgSNSTopic: !Ref OrgSNSTopic
  #       Prefix: !Ref Prefix
  #       PropogateUpdates: !Ref PropogateUpdates
  #       UniqueId: !Ref UniqueId
  #       RoleArn: !GetAtt CarveCoreRole.Arn
  #     TemplateURL: !Sub "https://s3.amazonaws.com/${CodeBucket}/nested-templates/${GITSHA}/carve-core-lambda.cfn.yml"
  #     TimeoutInMinutes: 5

  FunctionSfNetworkDiscoveryInitialize:
    Type: AWS::CloudFormation::Stack
    Properties: 
      Parameters:
        HandlerFile: sf_network_discovery_initialize
        # params below are the same for all nested lambda stacks
        CarveVersion: !Ref CarveVersion
        CodeBucket: !Ref CodeBucket
        ECR: !Ref ECR
        IMAGETAG: !Ref IMAGETAG
        OrgId: !Ref OrgId
        OrgSNSTopic: !Ref OrgSNSTopic
        Prefix: !Ref Prefix
        PropogateUpdates: !Ref PropogateUpdates
        UniqueId: !Ref UniqueId
        RoleArn: !GetAtt CarveCoreRole.Arn
      TemplateURL: !Sub "https://s3.amazonaws.com/${CodeBucket}/nested-templates/${GITSHA}/carve-core-lambda.cfn.yml"
      TimeoutInMinutes: 5

  FunctionSfNetworkDiscoveryAccount:
    Type: AWS::CloudFormation::Stack
    Properties: 
      Parameters:
        HandlerFile: sf_network_discovery_account
        # params below are the same for all nested lambda stacks
        CarveVersion: !Ref CarveVersion
        CodeBucket: !Ref CodeBucket
        ECR: !Ref ECR
        IMAGETAG: !Ref IMAGETAG
        OrgId: !Ref OrgId
        OrgSNSTopic: !Ref OrgSNSTopic
        Prefix: !Ref Prefix
        PropogateUpdates: !Ref PropogateUpdates
        UniqueId: !Ref UniqueId
        RoleArn: !GetAtt CarveCoreRole.Arn
      TemplateURL: !Sub "https://s3.amazonaws.com/${CodeBucket}/nested-templates/${GITSHA}/carve-core-lambda.cfn.yml"
      TimeoutInMinutes: 5

  FunctionSfNetworkDiscoveryFinalize:
    Type: AWS::CloudFormation::Stack
    Properties: 
      Parameters:
        HandlerFile: sf_network_discovery_finalize
        # params below are the same for all nested lambda stacks
        CarveVersion: !Ref CarveVersion
        CodeBucket: !Ref CodeBucket
        ECR: !Ref ECR
        IMAGETAG: !Ref IMAGETAG
        OrgId: !Ref OrgId
        OrgSNSTopic: !Ref OrgSNSTopic
        Prefix: !Ref Prefix
        PropogateUpdates: !Ref PropogateUpdates
        UniqueId: !Ref UniqueId
        RoleArn: !GetAtt CarveCoreRole.Arn
      TemplateURL: !Sub "https://s3.amazonaws.com/${CodeBucket}/nested-templates/${GITSHA}/carve-core-lambda.cfn.yml"
      TimeoutInMinutes: 5

  FunctionSnsEvent:
    Type: AWS::CloudFormation::Stack
    Properties: 
      Parameters:
        HandlerFile: sns_event
        # params below are the same for all nested lambda stacks
        CarveVersion: !Ref CarveVersion
        CodeBucket: !Ref CodeBucket
        ECR: !Ref ECR
        IMAGETAG: !Ref IMAGETAG
        OrgId: !Ref OrgId
        OrgSNSTopic: !Ref OrgSNSTopic
        Prefix: !Ref Prefix
        PropogateUpdates: !Ref PropogateUpdates
        UniqueId: !Ref UniqueId
        RoleArn: !GetAtt CarveCoreRole.Arn
      TemplateURL: !Sub "https://s3.amazonaws.com/${CodeBucket}/nested-templates/${GITSHA}/carve-core-lambda.cfn.yml"
      TimeoutInMinutes: 5

  FunctionSfStacksCreateStack:
    Type: AWS::CloudFormation::Stack
    Properties: 
      Parameters:
        HandlerFile: sf_stacks_create_stack
        # params below are the same for all nested lambda stacks
        CarveVersion: !Ref CarveVersion
        CodeBucket: !Ref CodeBucket
        ECR: !Ref ECR
        IMAGETAG: !Ref IMAGETAG
        OrgId: !Ref OrgId
        OrgSNSTopic: !Ref OrgSNSTopic
        Prefix: !Ref Prefix
        PropogateUpdates: !Ref PropogateUpdates
        UniqueId: !Ref UniqueId
        RoleArn: !GetAtt CarveCoreRole.Arn
      TemplateURL: !Sub "https://s3.amazonaws.com/${CodeBucket}/nested-templates/${GITSHA}/carve-core-lambda.cfn.yml"
      TimeoutInMinutes: 5

  FunctionSfStacksCreateChangeSet:
    Type: AWS::CloudFormation::Stack
    Properties: 
      Parameters:
        HandlerFile: sf_stacks_create_changeset
        # params below are the same for all nested lambda stacks
        CarveVersion: !Ref CarveVersion
        CodeBucket: !Ref CodeBucket
        ECR: !Ref ECR
        IMAGETAG: !Ref IMAGETAG
        OrgId: !Ref OrgId
        OrgSNSTopic: !Ref OrgSNSTopic
        Prefix: !Ref Prefix
        PropogateUpdates: !Ref PropogateUpdates
        UniqueId: !Ref UniqueId
        RoleArn: !GetAtt CarveCoreRole.Arn
      TemplateURL: !Sub "https://s3.amazonaws.com/${CodeBucket}/nested-templates/${GITSHA}/carve-core-lambda.cfn.yml"
      TimeoutInMinutes: 5

  FunctionSfStacksDescribeStack:
    Type: AWS::CloudFormation::Stack
    Properties: 
      Parameters:
        HandlerFile: sf_stacks_describe_stack
        # params below are the same for all nested lambda stacks
        CarveVersion: !Ref CarveVersion
        CodeBucket: !Ref CodeBucket
        ECR: !Ref ECR
        IMAGETAG: !Ref IMAGETAG
        OrgId: !Ref OrgId
        OrgSNSTopic: !Ref OrgSNSTopic
        Prefix: !Ref Prefix
        PropogateUpdates: !Ref PropogateUpdates
        UniqueId: !Ref UniqueId
        RoleArn: !GetAtt CarveCoreRole.Arn
      TemplateURL: !Sub "https://s3.amazonaws.com/${CodeBucket}/nested-templates/${GITSHA}/carve-core-lambda.cfn.yml"
      TimeoutInMinutes: 5

  FunctionSfStacksDescribeChangeSet:
    Type: AWS::CloudFormation::Stack
    Properties: 
      Parameters:
        HandlerFile: sf_stacks_describe_changeset
        # params below are the same for all nested lambda stacks
        CarveVersion: !Ref CarveVersion
        CodeBucket: !Ref CodeBucket
        ECR: !Ref ECR
        IMAGETAG: !Ref IMAGETAG
        OrgId: !Ref OrgId
        OrgSNSTopic: !Ref OrgSNSTopic
        Prefix: !Ref Prefix
        PropogateUpdates: !Ref PropogateUpdates
        UniqueId: !Ref UniqueId
        RoleArn: !GetAtt CarveCoreRole.Arn
      TemplateURL: !Sub "https://s3.amazonaws.com/${CodeBucket}/nested-templates/${GITSHA}/carve-core-lambda.cfn.yml"
      TimeoutInMinutes: 5

  FunctionSfStacksExecuteChangeSet:
    Type: AWS::CloudFormation::Stack
    Properties: 
      Parameters:
        HandlerFile: sf_stacks_execute_changeset
        # params below are the same for all nested lambda stacks
        CarveVersion: !Ref CarveVersion
        CodeBucket: !Ref CodeBucket
        ECR: !Ref ECR
        IMAGETAG: !Ref IMAGETAG
        OrgId: !Ref OrgId
        OrgSNSTopic: !Ref OrgSNSTopic
        Prefix: !Ref Prefix
        PropogateUpdates: !Ref PropogateUpdates
        UniqueId: !Ref UniqueId
        RoleArn: !GetAtt CarveCoreRole.Arn
      TemplateURL: !Sub "https://s3.amazonaws.com/${CodeBucket}/nested-templates/${GITSHA}/carve-core-lambda.cfn.yml"
      TimeoutInMinutes: 5

  FunctionSfDeployGraphInitialize:
    Type: AWS::CloudFormation::Stack
    Properties: 
      Parameters:
        HandlerFile: sf_deploy_graph_initialize
        # params below are the same for all nested lambda stacks
        CarveVersion: !Ref CarveVersion
        CodeBucket: !Ref CodeBucket
        ECR: !Ref ECR
        IMAGETAG: !Ref IMAGETAG
        OrgId: !Ref OrgId
        OrgSNSTopic: !Ref OrgSNSTopic
        Prefix: !Ref Prefix
        PropogateUpdates: !Ref PropogateUpdates
        UniqueId: !Ref UniqueId
        RoleArn: !GetAtt CarveCoreRole.Arn
      TemplateURL: !Sub "https://s3.amazonaws.com/${CodeBucket}/nested-templates/${GITSHA}/carve-core-lambda.cfn.yml"
      TimeoutInMinutes: 5

  FunctionSfDeployGraphDeploymentList:
    Type: AWS::CloudFormation::Stack
    Properties: 
      Parameters:
        HandlerFile: sf_deploy_graph_deployment_list
        # params below are the same for all nested lambda stacks
        CarveVersion: !Ref CarveVersion
        CodeBucket: !Ref CodeBucket
        ECR: !Ref ECR
        IMAGETAG: !Ref IMAGETAG
        OrgId: !Ref OrgId
        OrgSNSTopic: !Ref OrgSNSTopic
        Prefix: !Ref Prefix
        PropogateUpdates: !Ref PropogateUpdates
        UniqueId: !Ref UniqueId
        RoleArn: !GetAtt CarveCoreRole.Arn
      TemplateURL: !Sub "https://s3.amazonaws.com/${CodeBucket}/nested-templates/${GITSHA}/carve-core-lambda.cfn.yml"
      TimeoutInMinutes: 5

  FunctionSfDeployGraphFinalize:
    Type: AWS::CloudFormation::Stack
    Properties: 
      Parameters:
        HandlerFile: sf_deploy_graph_finalize
        # params below are the same for all nested lambda stacks
        CarveVersion: !Ref CarveVersion
        CodeBucket: !Ref CodeBucket
        ECR: !Ref ECR
        IMAGETAG: !Ref IMAGETAG
        OrgId: !Ref OrgId
        OrgSNSTopic: !Ref OrgSNSTopic
        Prefix: !Ref Prefix
        PropogateUpdates: !Ref PropogateUpdates
        UniqueId: !Ref UniqueId
        RoleArn: !GetAtt CarveCoreRole.Arn
      TemplateURL: !Sub "https://s3.amazonaws.com/${CodeBucket}/nested-templates/${GITSHA}/carve-core-lambda.cfn.yml"
      TimeoutInMinutes: 5

  FunctionSfCleanupInitialize:
    Type: AWS::CloudFormation::Stack
    Properties: 
      Parameters:
        HandlerFile: sf_cleanup_initialize
        # params below are the same for all nested lambda stacks
        CarveVersion: !Ref CarveVersion
        CodeBucket: !Ref CodeBucket
        ECR: !Ref ECR
        IMAGETAG: !Ref IMAGETAG
        OrgId: !Ref OrgId
        OrgSNSTopic: !Ref OrgSNSTopic
        Prefix: !Ref Prefix
        PropogateUpdates: !Ref PropogateUpdates
        UniqueId: !Ref UniqueId
        RoleArn: !GetAtt CarveCoreRole.Arn
      TemplateURL: !Sub "https://s3.amazonaws.com/${CodeBucket}/nested-templates/${GITSHA}/carve-core-lambda.cfn.yml"
      TimeoutInMinutes: 5

  FunctionSfCleanupDiscover:
    Type: AWS::CloudFormation::Stack
    Properties: 
      Parameters:
        HandlerFile: sf_cleanup_discover
        # params below are the same for all nested lambda stacks
        CarveVersion: !Ref CarveVersion
        CodeBucket: !Ref CodeBucket
        ECR: !Ref ECR
        IMAGETAG: !Ref IMAGETAG
        OrgId: !Ref OrgId
        OrgSNSTopic: !Ref OrgSNSTopic
        Prefix: !Ref Prefix
        PropogateUpdates: !Ref PropogateUpdates
        UniqueId: !Ref UniqueId
        RoleArn: !GetAtt CarveCoreRole.Arn
      TemplateURL: !Sub "https://s3.amazonaws.com/${CodeBucket}/nested-templates/${GITSHA}/carve-core-lambda.cfn.yml"
      TimeoutInMinutes: 5

  FunctionSfCleanupOrganize:
    Type: AWS::CloudFormation::Stack
    Properties: 
      Parameters:
        HandlerFile: sf_cleanup_organize
        # params below are the same for all nested lambda stacks
        CarveVersion: !Ref CarveVersion
        CodeBucket: !Ref CodeBucket
        ECR: !Ref ECR
        IMAGETAG: !Ref IMAGETAG
        OrgId: !Ref OrgId
        OrgSNSTopic: !Ref OrgSNSTopic
        Prefix: !Ref Prefix
        PropogateUpdates: !Ref PropogateUpdates
        UniqueId: !Ref UniqueId
        RoleArn: !GetAtt CarveCoreRole.Arn
      TemplateURL: !Sub "https://s3.amazonaws.com/${CodeBucket}/nested-templates/${GITSHA}/carve-core-lambda.cfn.yml"
      TimeoutInMinutes: 5

  FunctionSfCleanupDeleteStack:
    Type: AWS::CloudFormation::Stack
    Properties: 
      Parameters:
        HandlerFile: sf_cleanup_delete_stack
        # params below are the same for all nested lambda stacks
        CarveVersion: !Ref CarveVersion
        CodeBucket: !Ref CodeBucket
        ECR: !Ref ECR
        IMAGETAG: !Ref IMAGETAG
        OrgId: !Ref OrgId
        OrgSNSTopic: !Ref OrgSNSTopic
        Prefix: !Ref Prefix
        PropogateUpdates: !Ref PropogateUpdates
        UniqueId: !Ref UniqueId
        RoleArn: !GetAtt CarveCoreRole.Arn
      TemplateURL: !Sub "https://s3.amazonaws.com/${CodeBucket}/nested-templates/${GITSHA}/carve-core-lambda.cfn.yml"
      TimeoutInMinutes: 5

  FunctionSfCleanupDescribeStack:
    Type: AWS::CloudFormation::Stack
    Properties: 
      Parameters:
        HandlerFile: sf_cleanup_describe_stack
        # params below are the same for all nested lambda stacks
        CarveVersion: !Ref CarveVersion
        CodeBucket: !Ref CodeBucket
        ECR: !Ref ECR
        IMAGETAG: !Ref IMAGETAG
        OrgId: !Ref OrgId
        OrgSNSTopic: !Ref OrgSNSTopic
        Prefix: !Ref Prefix
        PropogateUpdates: !Ref PropogateUpdates
        UniqueId: !Ref UniqueId
        RoleArn: !GetAtt CarveCoreRole.Arn
      TemplateURL: !Sub "https://s3.amazonaws.com/${CodeBucket}/nested-templates/${GITSHA}/carve-core-lambda.cfn.yml"
      TimeoutInMinutes: 5

  CarveCoreRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${Prefix}carve-core"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: "Allow"
          Principal:
            Service:
              - "lambda.amazonaws.com"
          Action:
            - "sts:AssumeRole"
      Policies:
        - PolicyName: CarvePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - lambda:Invoke*
                  - lambda:ListTags
                  - lambda:GetFunction
                Resource:
                  - !Sub "arn:aws:lambda:*:*:function:${Prefix}carve-*"
              - Effect: Allow
                Action:
                  - iam:PassRole
                  - iam:GetRole
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - organizations:ListAccounts
                  - organizations:DescribeOrganization
                Resource: "*"
              - Effect: Allow
                Action:
                  - sts:AssumeRole
                Resource:
                  - !Sub "arn:aws:iam::*:role/*carve-org-role"
              - Effect: Allow
                Action:
                  - states:StartExecution
                  - states:Describe*
                  - states:Get*
                  - states:List*
                  - states:SendTaskSuccess
                Resource:
                  - !Sub "arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:${Prefix}carve-*-statemachine"

              - Effect: Allow
                Action:
                  - cloudformation:*
                Resource: 
                  - !Sub "arn:aws:cloudformation:*:${AWS::AccountId}:stack/${Prefix}carve-*"
              - Effect: Allow
                Action:
                  - "*"
                Resource:
                  - "*"
                Condition:
                  ForAnyValue:StringEquals:
                    aws:CalledVia:
                      - cloudformation.amazonaws.com      
              - Effect: Allow
                Action:
                  - ec2:DescribeInstances
                  - ec2:DescribeImages
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DescribeVpcs
                  - ec2:DescribeVpcPeeringConnections
                  - ec2:DescribeRegions
                  - ec2:DescribeSubnets
                  - ec2:DescribeAvailabilityZones
                  - ec2:AttachNetworkInterface
                  - ec2:DetachNetworkInterface
                  - ec2:CreateNetworkInterface
                  - ec2:DeleteNetworkInterface
                  - ec2:CreateTags
                Resource:
                  - "*"
              - Effect: Allow
                Action:
                  - elbv2:RegisterTargets
                Resource:
                  - !Sub "arn:aws:elasticloadbalancing:${AWS::Region}:${AWS::AccountId}:targetgroup/${Prefix}carve-nlb-*"
              - Effect: Allow
                Action:
                  - ec2:ModifyImageAttribute
                  - ec2:CopyImage
                  - ec2:DeregisterImage
                  - ec2:DeleteSnapshot
                Resource:
                  - "*"
                Condition:
                  StringEquals:
                    ec2:Owner:
                      - !Ref "AWS::AccountId"
              - Effect: Allow
                Action:
                  - s3:*
                Resource:
                  - !If
                    - UseOrgId
                    - !Sub "arn:aws:s3:::${Prefix}carve-managed-bucket-${OrgId}-${AWS::Region}"
                    - !Sub "arn:aws:s3:::${Prefix}carve-managed-bucket-${UniqueId}-${AWS::Region}"
                  - !If
                    - UseOrgId
                    - !Sub "arn:aws:s3:::${Prefix}carve-managed-bucket-${OrgId}-${AWS::Region}/*"
                    - !Sub "arn:aws:s3:::${Prefix}carve-managed-bucket-${UniqueId}-${AWS::Region}/*"
              - Effect: Allow
                Action:
                  - codepipeline:PutJobSuccessResult
                  - codepipeline:PutJobFailureResult
                Resource:
                  - "*"
              - Effect: Allow
                Action:
                  - ssm:PutParameter
                  - ssm:GetParam*
                  - ssm:DeleteParameter
                  - ssm:DeleteParameters
                Resource:
                  - !Sub "arn:aws:ssm:*:*:parameter/${Prefix}carve-resources/*"

  CarveDeployStacksStepFunction:
    Type: AWS::StepFunctions::StateMachine
    Properties: 
      DefinitionS3Location: 
        Bucket: !Ref CodeBucket
        Key: !Sub "step-functions/${GITSHA}/steps-carve-deploy-stacks.json"
      DefinitionSubstitutions: 
        FunctionSfStacksCreateStack: 
          Fn::GetAtt: [FunctionSfStacksCreateStack, Outputs.LambdaName]
        FunctionSfStacksDescribeStack: 
          Fn::GetAtt: [FunctionSfStacksDescribeStack, Outputs.LambdaName]
        FunctionSfStacksCreateChangeSet: 
          Fn::GetAtt: [FunctionSfStacksCreateChangeSet, Outputs.LambdaName]
        FunctionSfStacksDescribeChangeSet: 
          Fn::GetAtt: [FunctionSfStacksDescribeChangeSet, Outputs.LambdaName]
        FunctionSfStacksExecuteChangeSet: 
          Fn::GetAtt: [FunctionSfStacksExecuteChangeSet, Outputs.LambdaName]
      RoleArn: !Sub "arn:aws:iam::${AWS::AccountId}:role/${Prefix}carve-stepfunctions"
      StateMachineName: !Sub "${Prefix}carve-deploy-stacks-statemachine"
      StateMachineType: STANDARD

  CarvePrivateLinkStepFunction:
    Type: AWS::StepFunctions::StateMachine
    Properties: 
      DefinitionS3Location: 
        Bucket: !Ref CodeBucket
        Key: !Sub "step-functions/${GITSHA}/steps-carve-privatelink-setup.json"
      DefinitionSubstitutions: 
        FunctionSfPrivateLinkCore:
          Fn::GetAtt: [FunctionSfPrivateLinkCore, Outputs.LambdaName]
        FunctionSfPrivateLinkRegions:
          Fn::GetAtt: [FunctionSfPrivateLinkRegions, Outputs.LambdaName]
        CarveDeployStacksStepFunction: !Ref CarveDeployStacksStepFunction
      RoleArn: !Sub "arn:aws:iam::${AWS::AccountId}:role/${Prefix}carve-stepfunctions"
      StateMachineName: !Sub "${Prefix}carve-privatelink-setup-statemachine"
      StateMachineType: STANDARD

  # CarvePrivateLinkDeleteFunction:
  #   Type: AWS::StepFunctions::StateMachine
  #   Properties: 
  #     DefinitionS3Location: 
  #       Bucket: !Ref CodeBucket
  #       Key: !Sub "step-functions/${GITSHA}/steps-carve-privatelink-delete.json"
  #     DefinitionSubstitutions: 
  #       CarveCleanupStepFunction: !Ref CarveCleanupStepFunction
  #     RoleArn: !Sub "arn:aws:iam::${AWS::AccountId}:role/${Prefix}carve-stepfunctions"
  #     StateMachineName: !Sub "${Prefix}carve-privatelink-delete-statemachine"
  #     StateMachineType: STANDARD

  CarveDeployGraphStepFunction:
    Type: AWS::StepFunctions::StateMachine
    Properties: 
      DefinitionS3Location: 
        Bucket: !Ref CodeBucket
        Key: !Sub "step-functions/${GITSHA}/steps-carve-deploy-graph.json"
      DefinitionSubstitutions: 
        FunctionSfDeployGraphInitialize:
          Fn::GetAtt: [FunctionSfDeployGraphInitialize, Outputs.LambdaName]
        FunctionSfDeployGraphDeploymentList:
          Fn::GetAtt: [FunctionSfDeployGraphDeploymentList, Outputs.LambdaName]
        FunctionSfDeployGraphFinalize:
          Fn::GetAtt: [FunctionSfDeployGraphFinalize, Outputs.LambdaName]
        CarveDeployStacksStepFunction: !Ref CarveDeployStacksStepFunction
        CarveCleanupStepFunction: !Ref CarveCleanupStepFunction
      RoleArn: !Sub "arn:aws:iam::${AWS::AccountId}:role/${Prefix}carve-stepfunctions"
      StateMachineName: !Sub "${Prefix}carve-deploy-beacons-statemachine"
      StateMachineType: STANDARD

  CarveCleanupStepFunction:
    Type: AWS::StepFunctions::StateMachine
    Properties: 
      DefinitionS3Location: 
        Bucket: !Ref CodeBucket
        Key: !Sub "step-functions/${GITSHA}/steps-carve-cleanup.json"
      DefinitionSubstitutions: 
        FunctionSfCleanupInitialize:
          Fn::GetAtt: [FunctionSfCleanupInitialize, Outputs.LambdaName]
        FunctionSfCleanupOrganize:
          Fn::GetAtt: [FunctionSfCleanupOrganize, Outputs.LambdaName]
        FunctionSfCleanupDeleteStack:
          Fn::GetAtt: [FunctionSfCleanupDeleteStack, Outputs.LambdaName]
        FunctionSfCleanupDescribeStack:
          Fn::GetAtt: [FunctionSfCleanupDescribeStack, Outputs.LambdaName]
        # CarveFunction: 
        #   Fn::GetAtt: [FunctionEntrypoint, Outputs.LambdaArn]
        # CarveDeployStacksStepFunction: !Ref CarveDeployStacksStepFunction
      RoleArn: !Sub "arn:aws:iam::${AWS::AccountId}:role/${Prefix}carve-stepfunctions"
      StateMachineName: !Sub "${Prefix}carve-cleanup-statemachine"
      StateMachineType: STANDARD

  CarveNetworkDiscoveryStepFunction:
    Type: AWS::StepFunctions::StateMachine
    Properties: 
      DefinitionS3Location: 
        Bucket: !Ref CodeBucket
        Key: !Sub "step-functions/${GITSHA}/steps-carve-network-discovery.json"
      DefinitionSubstitutions: 
        # CarveFunction: !Ref CarveFunction
        FunctionSfNetworkDiscoveryInitialize:
          Fn::GetAtt: [FunctionSfNetworkDiscoveryInitialize, Outputs.LambdaName]
        FunctionSfNetworkDiscoveryAccount:
          Fn::GetAtt: [FunctionSfNetworkDiscoveryAccount, Outputs.LambdaName]
        FunctionSfNetworkDiscoveryFinalize:
          Fn::GetAtt: [FunctionSfNetworkDiscoveryFinalize, Outputs.LambdaName]
      RoleArn: !Sub "arn:aws:iam::${AWS::AccountId}:role/${Prefix}carve-stepfunctions"
      StateMachineName: !Sub "${Prefix}carve-network-discovery-statemachine"
      StateMachineType: STANDARD

  # CarveScaleStepFunction:
  #   Type: AWS::StepFunctions::StateMachine
  #   Properties: 
  #     DefinitionS3Location: 
  #       Bucket: !Ref CodeBucket
  #       Key: !Sub "step-functions/${GITSHA}/steps-carve-scale.json"
  #     DefinitionSubstitutions: 
  #       FunctionSfScaleInitialize: 
  #         Fn::GetAtt: [FunctionSfScaleInitialize, Outputs.LambdaName]
  #       FunctionSfScaleUpdateAsg: 
  #         Fn::GetAtt: [FunctionSfScaleUpdateAsg, Outputs.LambdaName]
  #       FunctionSfScaleCheckAsg:
  #         Fn::GetAtt: [FunctionSfScaleCheckAsg, Outputs.LambdaName]
  #       FunctionSfScaleFinalize: 
  #         Fn::GetAtt: [FunctionSfScaleFinalize, Outputs.LambdaName]
  #     RoleArn: !Sub "arn:aws:iam::${AWS::AccountId}:role/${Prefix}carve-stepfunctions"
  #     StateMachineName: !Sub "${Prefix}carve-scale-statemachine"
  #     StateMachineType: STANDARD


  StepFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${Prefix}carve-stepfunctions"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: "Allow"
          Action: sts:AssumeRole
          Principal:
            Service:
              - !Sub "states.${AWS::Region}.amazonaws.com"
      Policies:
        - PolicyName: StatesExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "lambda:InvokeFunction"
                Resource:
                  - !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${Prefix}carve-*"
              - Effect: Allow
                Action:
                  - events:PutTargets
                  - events:PutRule
                  - events:DescribeRule
                Resource: 
                  - !Sub arn:${AWS::Partition}:events:${AWS::Region}:${AWS::AccountId}:rule/StepFunctionsGetEventsForStepFunctionsExecutionRule
              - Effect: Allow
                Action:
                  - states:StartExecution
                  - states:Describe*
                  - states:Get*
                  - states:List*
                Resource:
                  - !Sub "arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:${Prefix}carve-*-statemachine"

  OrgSNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: !Sub "${Prefix}carve-org-events"
      TopicName: !Sub "${Prefix}carve-org-events"

  OrgSNSTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      Topics:
        - !Ref OrgSNSTopic
      PolicyDocument:
        Id: Carve SNS Policy
        Version: "2012-10-17"
        Statement:
          - Sid: Allow events
            Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: 'sns:Publish'
            Resource: '*'
          - Sid: Allow Carve Lambdas
            Effect: "Allow"
            Principal:
              AWS: "*"
            Action:
              - "sns:Subscribe"
              - "sns:Receive"
              - "sns:Publish"
            Resource: !Ref OrgSNSTopic
            Condition:
              StringEquals:
                aws:PrincipalOrgID: !Ref OrgId
              # ArnLike:
              #   AWS:SourceArn: !Sub "arn:aws:lambda:*:*:function:${Prefix}carve-*"
          # - Sid: Allow Carve Core Lambdas
          #   Effect: "Allow"
          #   Principal:
          #     AWS: "*"
          #   Action:
          #     - "sns:Subscribe"
          #     - "sns:Receive"
          #     - "sns:Publish"
          #   Resource: !Ref OrgSNSTopic
          #   Condition:
          #     StringEquals:
          #       aws:PrincipalOrgID: !Ref OrgId
          #     ArnLike:
          #       AWS:SourceArn: !Sub "arn:aws:lambda:*:*:function:${Prefix}carve-vpc-*"


  # AccountSNSTopic:
  #   Type: AWS::SNS::Topic
  #   Properties:
  #     DisplayName: !Sub "${Prefix}carve-account-events"
  #     TopicName: !Sub "${Prefix}carve-account-events"

  # AccountSNSSubscription:
  #   Type: AWS::SNS::Subscription
  #   Properties:
  #     Endpoint: !GetAtt CarveFunction.Arn
  #     Protocol: Lambda
  #     TopicArn: !Ref AccountSNSTopic

  # AccountSNSInvoke:
  #   Type: AWS::Lambda::Permission
  #   Properties:
  #     Action: lambda:InvokeFunction
  #     Principal: sns.amazonaws.com
  #     SourceArn: !Ref AccountSNSTopic
  #     FunctionName: !GetAtt CarveFunction.Arn

  # AccountSNSTopicPolicy:
  #   Type: AWS::SNS::TopicPolicy
  #   Properties:
  #     Topics:
  #       - !Ref AccountSNSTopic
  #     PolicyDocument:
  #       Id: Carve SNS Policy
  #       Version: "2012-10-17"
  #       Statement:
  #         - Sid: Allow events
  #           Effect: Allow
  #           Principal:
  #             Service: events.amazonaws.com
  #           Action: 'sns:Publish'
  #           Resource: '*'
  #         - Sid: Allow Carve Lambdas
  #           Effect: "Allow"
  #           Principal:
  #             AWS: "*"
  #           Action:
  #             - "sns:Subscribe"
  #             - "sns:Receive"
  #             - "sns:Publish"
  #           Resource: !Ref AccountSNSTopic
  #           Condition:
  #             StringEquals:
  #               aws:PrincipalOrgID: !Ref OrgId



  # SSMParameter:
  #   Type: AWS::SSM::Parameter
  #   Properties:
  #     Name: !Sub "/${Prefix}carve-resources/scale"
  #     Description: "Valid Values: none, subnet, vpc"
  #     Type: String
  #     Value: subnet

  # SSMParameterChange:
  #   Type: AWS::Events::Rule
  #   Properties:
  #     Description: "ASG notifications to SNS"
  #     EventPattern: 
  #       source:
  #         - "aws.ssm"
  #       detail-type:
  #         - "Parameter Store Change"
  #       detail:
  #         name:
  #           - !Ref SSMParameter
  #     State: "ENABLED"
  #     Targets:
  #       - Id: "InvokeCarve"
  #         # Arn: !GetAtt CarveFunction.Arn
  #         Arn: 
  #           Fn::GetAtt: [FunctionEntrypoint, Outputs.LambdaArn]

  # CloudWatchInvokeLambda:
  #   Type: AWS::Lambda::Permission
  #   Properties:
  #     FunctionName: !GetAtt [FunctionEntrypoint, Outputs.LambdaArn]
  #     Action: "lambda:InvokeFunction"
  #     Principal: "events.amazonaws.com"
  #     SourceArn: !GetAtt SSMParameterChange.Arn

  CloudWatchRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${Prefix}carve-cloudwatch"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: "Allow"
          Principal:
            Service:
              - "events.amazonaws.com"
          Action:
            - "sts:AssumeRole"
      Policies:
        - PolicyName: LambdaInvocation
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - lambda:Invoke*
                Resource:
                 #  - !GetAtt CarveFunction.Arn
                  - Fn::GetAtt: [FunctionEntrypoint, Outputs.LambdaArn]

   # ScheduleRule:
   #   Type: AWS::Events::Rule
   #   Properties:
   #     Description: execute VPC route test every minute
   #     RoleArn: !GetAtt CloudWatchRole.Arn
   #     ScheduleExpression:  "cron(* * * * *)"  # Every Minute
   #     State: ENABLED
   #     Targets:
   #       - Arn: !GetAtt CarveFunction.Arn
   #         Id: !Ref CarveFunction

  CarveS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !If
        - UseOrgId
        - !Sub "${Prefix}carve-managed-bucket-${OrgId}-${AWS::Region}"
        - !Sub "${Prefix}carve-managed-bucket-${UniqueId}-${AWS::Region}"
      AccessControl: Private
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerEnforced
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: 'AES256'

  CarveS3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    DependsOn: CarveCoreRole
    Properties:
      Bucket: !Ref CarveS3Bucket
      PolicyDocument:
        Statement:
          - Sid: CarveCoreLambda
            Effect: Allow 
            Action:
              - "s3:*"
            Resource:
              - !Sub "arn:aws:s3:::${CarveS3Bucket}"
              - !Sub "arn:aws:s3:::${CarveS3Bucket}/*"
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:role/${Prefix}carve-core"
          - Sid: DeploymentAccess
            Effect: Allow 
            Action:
              - "s3:Get*"
              - "s3:PutObject"
            Resource: 
              - !Sub "arn:aws:s3:::${CarveS3Bucket}"
              - !Sub "arn:aws:s3:::${CarveS3Bucket}/*"
            Principal:
              AWS: "*"
            Condition:
              StringEquals:
                aws:PrincipalOrgID: !Ref OrgId


Outputs:
  CarveTopicArn:
    Description: Carve Events Topic ARN
    Value: !Ref OrgSNSTopic
    Export:
      Name: !Sub "${AWS::StackName}:TopicArn"
