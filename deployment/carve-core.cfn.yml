AWSTemplateFormatVersion: "2010-09-09"
Description: Core Organization Resources for Carve

Parameters:
  
  OrgId:
    Type: String
    Description: AWS Organizations Id
    Default: ""
  UniqueId:
    Type: String
    Description: A unique id may be used instead of OrgId on buckets
    Default: ""
  CodeBucket:
    Type: String
    Default: ""
    Description: S3 Bucket with Carve lambda zip package
  GITSHA:
    Type: String
    Default: ""
    Description: latest Git commit SHA determines S3 artifact paths
  Prefix:
    Type: String
    Description: "Prefix carve AWS resources and stacknames with this"
    Default: ""
  CarveVersion:
    Type: String
    Default: "0"
  PropogateUpdates:
    Type: String
    Default: 'True'
    Description: Automatically propogate version updates to managed resources 

Conditions:
  UseOrgId: !Equals [ !Ref "UniqueId", "" ]


Resources:

  CarveFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${Prefix}carve-core"
      Description: Continuous AWS Route Verification Engine
      Code:
        S3Bucket: !Ref CodeBucket
        S3Key: !Sub "lambda_packages/${GITSHA}/package.zip"
      Environment:
        Variables:
          CodeBucket: !Ref CodeBucket
          CarveS3Bucket: !If
            - UseOrgId
            - !Sub "${Prefix}carve-managed-bucket-${OrgId}-${AWS::Region}"
            - !Sub "${Prefix}carve-managed-bucket-${UniqueId}-${AWS::Region}"
          CarveSNSTopicArn: !Ref SNSTopic
          CarveVersion: !Ref CarveVersion
          CleanupStateMachine: !Sub arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:${Prefix}carve-cleanup-statemachine
          DeployBeaconsStateMachine: !Sub arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:${Prefix}carve-deploy-beacons-statemachine
          DeployStacksStateMachine: !Sub arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:${Prefix}carve-deploy-stacks-statemachine
          DiscoveryStateMachine: !Sub arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:${Prefix}carve-discovery-statemachine
          TokenStateMachine: !Sub arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:${Prefix}carve-token-statemachine
          GITSHA: !Ref GITSHA
          MPLCONFIGDIR: /tmp/matplotlib
          OrgId: !Ref OrgId
          UniqueId: !Ref UniqueId
          PropogateUpdates: !Ref PropogateUpdates
          Regions: "us-east-1,us-east-2"
          Prefix: !Ref Prefix
      Handler: c_entrypoint.lambda_handler
      Runtime: python3.8
      MemorySize: 1024
      Timeout: 900
      Role: !GetAtt CarveCoreRole.Arn
      ReservedConcurrentExecutions: 200
      Layers:
        # Carve requirements in their own layer for small lambda pkg
        - !Ref CarveRequirementsLayer
        # AWS provided lambda layer for scipy and numpy
        - !Sub "arn:aws:lambda:${AWS::Region}:668099181075:layer:AWSLambda-Python38-SciPy1x:29"
        # public lambda layer for matplotlib from Klayers
        - !Sub "arn:aws:lambda:${AWS::Region}:770693421928:layer:Klayers-python38-matplotlib:21"

  CarveRequirementsLayer:
    Type: AWS::Lambda::LayerVersion
    Properties: 
      CompatibleRuntimes:
        - python3.8
      Content: 
        S3Bucket: !Ref CodeBucket
        S3Key: !Sub "lambda_packages/${GITSHA}/reqs_package.zip"
      Description: "Carve python requirements"
      LayerName: CarveRequirementsLayer

  LayerPermission:
    Type: AWS::Lambda::LayerVersionPermission
    Properties: 
      Action: lambda:GetLayerVersion
      LayerVersionArn: !Ref CarveRequirementsLayer
      OrganizationId: !Ref OrgId
      Principal: "*"


  CarveCoreRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${Prefix}carve-core"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: "Allow"
          Principal:
            Service:
              - "lambda.amazonaws.com"
          Action:
            - "sts:AssumeRole"
      Policies:
        - PolicyName: CarvePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - lambda:Invoke*
                  - lambda:ListTags
                  - lambda:GetFunction
                Resource:
                  - !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${Prefix}carve-subnet-*"
              - Effect: Allow
                Action:
                  - iam:PassRole
                  - iam:GetRole
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - organizations:ListAccounts
                Resource: "*"
              - Effect: Allow
                Action:
                  - sts:AssumeRole
                Resource:
                  - !Sub "arn:aws:iam::*:role/${Prefix}carve-role"
              - Effect: Allow
                Action:
                  - states:StartExecution
                  - states:Describe*
                  - states:Get*
                  - states:List*
                Resource:
                  - !Sub "arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:${Prefix}carve-*-statemachine"
              # - Effect: "Allow"
              #   Action:
              #     - "sns:Subscribe"
              #     - "sns:Receive"
              #     - "sns:Publish"
              #   Resource: 
              #     - "*"
              - Effect: Allow
                Action:
                  - cloudformation:*
                Resource: 
                  - !Sub "arn:aws:cloudformation:*:${AWS::AccountId}:stack/${Prefix}carve-managed-*"
              - Effect: Allow
                Action:
                  - "*"
                Resource:
                  - "*"
                # Condition:
                #   ForAnyValue:StringEquals:
                #     aws:CalledVia:
                #       - cloudformation.amazonaws.com               
              - Effect: Allow
                Action:
                  - ec2:DescribeInstances
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DescribeVpcs
                  - ec2:DescribeVpcPeeringConnections
                  - ec2:DescribeRegions
                  - ec2:DescribeSubnets
                  - ec2:AttachNetworkInterface
                  - ec2:DetachNetworkInterface
                  - ec2:CreateNetworkInterface
                  - ec2:DeleteNetworkInterface
                Resource:
                  - "*"
              - Effect: Allow
                Action:
                  - s3:*
                Resource:
                  - !Sub "arn:aws:s3:::${Prefix}carve-managed-bucket-${OrgId}-${AWS::Region}"
                  - !Sub "arn:aws:s3:::${Prefix}carve-managed-bucket-${OrgId}-${AWS::Region}/*"



  CarveDeployStacksStepFunction:
    Type: AWS::StepFunctions::StateMachine
    Properties: 
      DefinitionS3Location: 
        Bucket: !Ref CodeBucket
        Key: !Sub "step_functions/${GITSHA}/steps-carve-deploy-stacks.json"
      DefinitionSubstitutions: 
        CarveFunction: !Ref CarveFunction
      RoleArn: !Sub "arn:aws:iam::${AWS::AccountId}:role/${Prefix}carve-stepfunctions"
      StateMachineName: !Sub "${Prefix}carve-deploy-stacks-statemachine"
      StateMachineType: STANDARD

  CarveTokenStepFunction:
    Type: AWS::StepFunctions::StateMachine
    Properties: 
      DefinitionS3Location: 
        Bucket: !Ref CodeBucket
        Key: !Sub "step_functions/${GITSHA}/steps-carve-tokens-ssm.json"
      DefinitionSubstitutions: 
        CarveFunction: !Ref CarveFunction
      RoleArn: !Sub "arn:aws:iam::${AWS::AccountId}:role/${Prefix}carve-stepfunctions"
      StateMachineName: !Sub "${Prefix}carve-token-statemachine"
      StateMachineType: STANDARD

  CarveDeployBeaconsStepFunction:
    Type: AWS::StepFunctions::StateMachine
    Properties: 
      DefinitionS3Location: 
        Bucket: !Ref CodeBucket
        Key: !Sub "step_functions/${GITSHA}/steps-carve-deploy-beacons.json"
      DefinitionSubstitutions: 
        CarveFunction: !Ref CarveFunction
        CarveDeployStacksStepFunction: !Ref CarveDeployStacksStepFunction
        CarveCleanupStepFunction: !Ref CarveCleanupStepFunction
      RoleArn: !Sub "arn:aws:iam::${AWS::AccountId}:role/${Prefix}carve-stepfunctions"
      StateMachineName: !Sub "${Prefix}carve-deploy-beacons-statemachine"
      StateMachineType: STANDARD

  CarveCleanupStepFunction:
    Type: AWS::StepFunctions::StateMachine
    Properties: 
      DefinitionS3Location: 
        Bucket: !Ref CodeBucket
        Key: !Sub "step_functions/${GITSHA}/steps-carve-cleanup.json"
      DefinitionSubstitutions: 
        CarveFunction: !GetAtt CarveFunction.Arn
        CarveDeployStacksStepFunction: !Ref CarveDeployStacksStepFunction
      RoleArn: !Sub "arn:aws:iam::${AWS::AccountId}:role/${Prefix}carve-stepfunctions"
      StateMachineName: !Sub "${Prefix}carve-cleanup-statemachine"
      StateMachineType: STANDARD

  CarveDiscoveryStepFunction:
    Type: AWS::StepFunctions::StateMachine
    Properties: 
      DefinitionS3Location: 
        Bucket: !Ref CodeBucket
        Key: !Sub "step_functions/${GITSHA}/steps-carve-discovery.json"
      DefinitionSubstitutions: 
        CarveFunction: !Ref CarveFunction
      RoleArn: !Sub "arn:aws:iam::${AWS::AccountId}:role/${Prefix}carve-stepfunctions"
      StateMachineName: !Sub "${Prefix}carve-discovery-statemachine"
      StateMachineType: STANDARD


  StepFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${Prefix}carve-stepfunctions"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: "Allow"
          Action: sts:AssumeRole
          Principal:
            Service:
              - !Sub "states.${AWS::Region}.amazonaws.com"
      Policies:
        - PolicyName: StatesExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "lambda:InvokeFunction"
                Resource:
                  - !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${Prefix}carve-*"
              - Effect: Allow
                Action:
                  - events:PutTargets
                  - events:PutRule
                  - events:DescribeRule
                Resource: 
                  - !Sub arn:${AWS::Partition}:events:${AWS::Region}:${AWS::AccountId}:rule/StepFunctionsGetEventsForStepFunctionsExecutionRule
              - Effect: Allow
                Action:
                  - states:StartExecution
                  - states:Describe*
                  - states:Get*
                  - states:List*
                Resource:
                  - !Sub "arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:${Prefix}carve-*-statemachine"

  SNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: !Sub "${Prefix}carve-org-events"
      TopicName: !Sub "${Prefix}carve-org-events"

  CarveSNSSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: !GetAtt CarveFunction.Arn
      Protocol: Lambda
      TopicArn: !Ref SNSTopic

  CarveLambdaSNSInvoke:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      Principal: sns.amazonaws.com
      SourceArn: !Ref SNSTopic
      FunctionName: !GetAtt CarveFunction.Arn

  TopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      Topics:
        - !Ref SNSTopic
      PolicyDocument:
        Id: Carve SNS Policy
        Version: "2012-10-17"
        Statement:
          - Sid: Allow events
            Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: 'sns:Publish'
            Resource: '*'
          - Sid: Allow Carve Lambdas
            Effect: "Allow"
            Principal:
              AWS: "*"
            Action:
              - "sns:Subscribe"
              - "sns:Receive"
              - "sns:Publish"
            Resource: !Ref SNSTopic
            Condition:
              StringEquals:
                aws:PrincipalOrgID: !Ref OrgId
              # ArnLike:
              #   AWS:SourceArn: !Sub "arn:aws:lambda:*:*:function:${Prefix}carve-*"
          # - Sid: Allow Carve Core Lambdas
          #   Effect: "Allow"
          #   Principal:
          #     AWS: "*"
          #   Action:
          #     - "sns:Subscribe"
          #     - "sns:Receive"
          #     - "sns:Publish"
          #   Resource: !Ref SNSTopic
          #   Condition:
          #     StringEquals:
          #       aws:PrincipalOrgID: !Ref OrgId
          #     ArnLike:
          #       AWS:SourceArn: !Sub "arn:aws:lambda:*:*:function:${Prefix}carve-vpc-*"


  AccountSNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: !Sub "${Prefix}carve-account-events"
      TopicName: !Sub "${Prefix}carve-account-events"

  AccountSNSSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: !GetAtt CarveFunction.Arn
      Protocol: Lambda
      TopicArn: !Ref SNSTopic

  AccountSNSInvoke:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      Principal: sns.amazonaws.com
      SourceArn: !Ref SNSTopic
      FunctionName: !GetAtt CarveFunction.Arn

  AccountTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      Topics:
        - !Ref AccountSNSTopic
      PolicyDocument:
        Id: Carve SNS Policy
        Version: "2012-10-17"
        Statement:
          - Sid: Allow events
            Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: 'sns:Publish'
            Resource: '*'
          - Sid: Allow Carve Lambdas
            Effect: "Allow"
            Principal:
              AWS: "*"
            Action:
              - "sns:Subscribe"
              - "sns:Receive"
              - "sns:Publish"
            Resource: !Ref AccountSNSTopic
            Condition:
              StringEquals:
                aws:PrincipalOrgID: !Ref OrgId
          - Sid: Allow Carve Core Management
            Effect: "Allow"
            Principal:
              AWS: !Sub "arn:aws:sts::${CarveCoreAccount}:assumed-role/${Prefix}carve-core/carve-changeset-${AWS::Region}"
              # AWS: !Sub "arn:aws:iam::${CarveCoreAccount}:root"
              # AWS: !Sub "arn:aws:iam::${CarveCoreAccount}:role/${Prefix}carve-lambda-${OrgId}"
            Action:
              - "sns:Subscribe"
              - "sns:Receive"
              - "sns:Publish"
            Resource: !Ref AccountSNSTopic


  SSMParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/${Prefix}carve-resources/scale"
      Description: "Valid Values: none, subnet, vpc"
      Type: String
      Value: subnet

  SSMParameterChange:
    Type: AWS::Events::Rule
    Properties:
      Description: "ASG notifications to SNS"
      EventPattern: 
        source:
          - "aws.ssm"
        detail-type:
          - "Parameter Store Change"
        detail:
          name:
            - !Ref SSMParameter
      State: "ENABLED"
      Targets:
        - Id: "InvokeCarve"
          Arn: !GetAtt CarveFunction.Arn

  CloudWatchInvokeLambda:
     Type: AWS::Lambda::Permission
     Properties:
       FunctionName: !Ref CarveFunction
       Action: "lambda:InvokeFunction"
       Principal: "events.amazonaws.com"
       SourceArn: !GetAtt SSMParameterChange.Arn

   # CloudWatchRole:
   #   Type: AWS::IAM::Role
   #   Properties:
   #     AssumeRolePolicyDocument:
   #       Version: "2012-10-17"
   #       Statement:
   #       - Effect: "Allow"
   #         Principal:
   #           Service:
   #             - "events.amazonaws.com"
   #         Action:
   #           - "sts:AssumeRole"
   #     Policies:
   #       - PolicyName: LambdaInvocation
   #         PolicyDocument:
   #           Version: "2012-10-17"
   #           Statement:
   #             - Effect: Allow
   #               Action:
   #                 - lambda:Invoke*
   #               Resource:
   #                 - !GetAtt CraveFunction.arn

   # ScheduleRule:
   #   Type: AWS::Events::Rule
   #   Properties:
   #     Description: execute VPC route test every minute
   #     RoleArn: !GetAtt CloudWatchRole.Arn
   #     ScheduleExpression:  "cron(* * * * *)"  # Every Minute
   #     State: ENABLED
   #     Targets:
   #       - Arn: !GetAtt CraveFunction.Arn
   #         Id: !Ref CraveFunction

  CarveS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !If
        - UseOrgId
        - !Sub "${Prefix}carve-managed-bucket-${OrgId}-${AWS::Region}"
        - !Sub "${Prefix}carve-managed-bucket-${UniqueId}-${AWS::Region}"
      AccessControl: Private
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: 'AES256'

  CarveS3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    DependsOn: CarveCoreRole
    Properties:
      Bucket: !Ref CarveS3Bucket
      PolicyDocument:
        Statement:
          - Sid: CarveCoreLambda
            Effect: Allow 
            Action:
              - "s3:*"
            Resource: !GetAtt CarveS3Bucket.Arn
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:role/${Prefix}carve-core"
          - Sid: DeploymentAccess
            Effect: Allow 
            Action:
              - "s3:Get*"
              - "s3:PutObject"
            Resource: 
              - !Sub "arn:aws:s3:::${CarveS3Bucket}"
              - !Sub "arn:aws:s3:::${CarveS3Bucket}/*"
            Principal:
              AWS: "*"
            Condition:
              StringEquals:
                aws:PrincipalOrgID: !Ref OrgId

  S3InvokeCarvePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt CarveFunction.Arn
      Principal: s3.amazonaws.com
      SourceArn: !GetAtt CarveS3Bucket.Arn


Outputs:
  CarveTopicArn:
    Description: Carve Events Topic ARN
    Value: !Ref SNSTopic
    Export:
      Name: !Sub "${AWS::StackName}:TopicArn"
