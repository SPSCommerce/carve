AWSTemplateFormatVersion: '2010-09-09'

Parameters:
  DeployBucket:
    Default: carve-deploy
    Description: bucket name
    Type: String
  OrganizationsId:
    Type: String
    Description: AWS Organizations Id
    Default: ''
  RootOU:
    Type: String
    Description: AWS Organizations Root OU Id for stackset deploy
    Default: ''
  ResourcePrefix:
    Type: String
    Description: Prefix all carve stack names with this
    Default: ''
  GitHubOAUTHTokenASMPath:
    Default: githuboauthtoken
    Description: GitHubServiceOAUTHToken path in Secrets Manager
    Type: String

Resources:
  CarvePipelineRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: carve-deploy-pipeline
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codepipeline.amazonaws.com
                - cloudformation.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CodePipelineServiceRole
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: CloudWatchLogsPolicy
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:PutRetentionPolicy
                  - logs:DeleteLogGroup
                Resource:
                  - '*'
              - Effect: Allow
                Action:
                  - codebuild:StartBuild
                  - codebuild:BatchGetBuilds
                Resource:
                  - !Sub 'arn:aws:codebuild:${AWS::Region}:${AWS::AccountId}:project/CarveCodeBuild'
              - Effect: Allow
                Action:
                  - '*'
                Resource:
                  - '*'

  CarveDeploymentPipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: CarveDeploymentPipeline
      RoleArn: !GetAtt 'CarvePipelineRole.Arn'
      ArtifactStore:
        Location: !Ref 'DeployBucket'
        Type: S3
      Stages:
        - Name: CarveSource
          Actions:
            - Name: SourceAction
              Namespace: github_vars
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Provider: GitHub
                Version: 1
              OutputArtifacts:
                - Name: GithubRepo
              Region: !Ref 'AWS::Region'
              Configuration:
                Owner: anotherhobby
                Repo: carve
                Branch: main
                OAuthToken: !Sub '{{resolve:secretsmanager:${GitHubOAUTHTokenASMPath}:SecretString:token}}'
        - Name: PackageLambda-DeployIAM
          Actions:
            - Name: carve-lambda-packaging
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              InputArtifacts:
                - Name: GithubRepo
              Region: !Ref 'AWS::Region'
              Configuration:
                ProjectName: !Ref 'CarveCodeBuild'
                EnvironmentVariables: '[{"name":"GITSHA","value":"#{github_vars.CommitId}","type":"PLAINTEXT"}]'
            - Name: carve-iam-org-stackset
              Region: !Ref 'AWS::Region'
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormationStackSet
                Version: 1
              Configuration:
                Capabilities: CAPABILITY_NAMED_IAM
                OrganizationsAutoDeployment: Enabled
                Description: CarveRole
                DeploymentTargets: !Ref 'RootOU'
                Regions: !Ref 'AWS::Region'
                FailureTolerancePercentage: 100
                MaxConcurrentPercentage: 100
                PermissionModel: SERVICE_MANAGED
                StackSetName: !Sub '${ResourcePrefix}carve-lambda-${OrganizationsId}'
                TemplatePath: GithubRepo::deployment/carve-iam.cfn.yml
                Parameters: !Sub 'ParameterKey=OrganizationsId,ParameterValue=${OrganizationsId}
                  ParameterKey=ResourcePrefix,ParameterValue="${ResourcePrefix}"'
              OutputArtifacts: []
              InputArtifacts:
                - Name: GithubRepo
            - Name: carve-iam-core
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: 1
              Configuration:
                ChangeSetName: pipeline-changeset
                ActionMode: CREATE_UPDATE
                Capabilities: CAPABILITY_NAMED_IAM,CAPABILITY_AUTO_EXPAND
                RoleArn: !GetAtt 'CarvePipelineRole.Arn'
                StackName: !Sub '${ResourcePrefix}carve-iam-${OrganizationsId}'
                TemplatePath: GithubRepo::deployment/carve-iam.cfn.yml
                ParameterOverrides: !Sub '{"OrganizationsId": "${OrganizationsId}","ResourcePrefix":"${ResourcePrefix}"}'
              OutputArtifacts: []
              InputArtifacts:
                - Name: GithubRepo
        - Name: CarveDeploy
          Actions:
            - Name: carve-core
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: 1
              Configuration:
                ChangeSetName: pipeline-changeset
                ActionMode: CREATE_UPDATE
                Capabilities: CAPABILITY_NAMED_IAM,CAPABILITY_AUTO_EXPAND
                RoleArn: !GetAtt 'CarvePipelineRole.Arn'
                StackName: !Sub '${ResourcePrefix}carve-core-${OrganizationsId}'
                TemplatePath: GithubRepo::deployment/carve-core.cfn.yml
                ParameterOverrides: !Sub '{"GITSHA":"#{github_vars.CommitId}","ResourcePrefix":"${ResourcePrefix}","OrganizationsId":"${OrganizationsId}","CodeBucket":"${DeployBucket}"}'
              OutputArtifacts: []
              InputArtifacts:
                - Name: GithubRepo
            - Name: carve-deploy-bucket
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: 1
              Configuration:
                ChangeSetName: pipeline-changeset
                ActionMode: CREATE_UPDATE
                Capabilities: CAPABILITY_NAMED_IAM,CAPABILITY_AUTO_EXPAND
                RoleArn: !GetAtt 'CarvePipelineRole.Arn'
                StackName: !Sub "${ResourcePrefix}carve-managed-${OrganizationsId}-s3-${AWS::Region}"
                TemplatePath: GithubRepo::src/managed_deployment/carve-deploy-bucket.cfn.yml
                ParameterOverrides: !Sub '{"ResourcePrefix":"${ResourcePrefix}","OrganizationsId":"${OrganizationsId}","CarveCoreRegion":"${AWS::Region}"}'
              OutputArtifacts: []
              InputArtifacts:
                - Name: GithubRepo
            # - Name: carve-ec2-deployment
            #   ActionTypeId:
            #     Category: Deploy
            #     Owner: AWS
            #     Provider: CloudFormation
            #     Version: 1
            #   Configuration:
            #     ChangeSetName: pipeline-changeset
            #     ActionMode: CREATE_UPDATE
            #     Capabilities: CAPABILITY_NAMED_IAM,CAPABILITY_AUTO_EXPAND
            #     RoleArn: !GetAtt 'CarvePipelineRole.Arn'
            #     StackName: !Sub '${ResourcePrefix}carve-ec2-${OrganizationsId}'
            #     TemplatePath: GithubRepo::src/deployment/carve-endpoint-ec2.sam.yml
            #     ParameterOverrides: !Sub '{"GITSHA":"#{github_vars.CommitId}","ResourcePrefix":"${ResourcePrefix}","OrganizationsId":"${OrganizationsId}"}'
            #   OutputArtifacts: []
            #   InputArtifacts:
            #     - Name: GithubRepo
        - Name: PostDeploy
          Actions:
            - Name: update-s3-notification
              ActionTypeId:
                Category: Invoke
                Owner: AWS
                Provider: Lambda
                Version: '1'
              RunOrder: 1
              Configuration:
                FunctionName: !Sub "${ResourcePrefix}carve-${OrganizationsId}"
                UserParameters: BucketNotification
              OutputArtifacts: []
              InputArtifacts: []
              Region: !Ref 'AWS::Region'
            - Name: update-carve-endpoints
              ActionTypeId:
                Category: Invoke
                Owner: AWS
                Provider: Lambda
                Version: '1'
              RunOrder: 2
              Configuration:
                FunctionName: !Sub "${ResourcePrefix}carve-${OrganizationsId}"
                UserParameters: UpdateEndpoints
              OutputArtifacts: []
              InputArtifacts: []
              Region: !Ref 'AWS::Region'


  CarveCodeBuild:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Name: CarveCodeBuild
      ServiceRole: !GetAtt 'CarveCodeBuildRole.Arn'
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/python:3.7.1
        PrivilegedMode: true
        EnvironmentVariables:
          - Name: DEPLOYMENT_BUCKET
            Value: !Ref 'DeployBucket'
          - Name: GIT_TOKEN
            Value: !Ref 'GitHubOAUTHTokenASMPath'
      Source:
        Type: CODEPIPELINE
        BuildSpec: deployment/codepipeline/buildspec.yml
      TimeoutInMinutes: 5
      Tags:
        - Key: GitSHA
          Value: '0'

  CarveCodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: carve-deploy-codebuild
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CodeBuildServiceRoleV2
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: CloudWatchLogsPolicy
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - '*'
              - Sid: DeployPolicy
                Effect: Allow
                Action:
                  - ssm:*
                  - secretsmanager:*
                  - kms:Decrypt
                Resource:
                  - '*'
              - Sid: S3Policy
                Effect: Allow
                Action:
                  - s3:*
                Resource:
                  - !Sub "arn:aws:s3:::${DeployBucket}"
                  - !Sub "arn:aws:s3:::${DeployBucket}/*"
              - Sid: iampolicy
                Effect: Allow
                Action:
                  - iam:PassRole
                Resource:
                  - '*'
