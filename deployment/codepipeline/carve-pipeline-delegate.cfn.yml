AWSTemplateFormatVersion: '2010-09-09'

Parameters:
  GitHubOAUTHTokenASMPath:
    Default: githuboauthtoken
    Description: GitHubServiceOAUTHToken Secret name
    Type: String
  OrgId:
    Type: String
    Description: AWS Organizations Id
    Default: ''
  RootOU:
    Type: String
    Description: AWS Organizations Root OU Id.
    Default: ''
  Prefix:
    Type: String
    Description: "Prefix carve AWS resources and stacknames with this"
    Default: ''
  UniqueId:
    Type: String
    Description: A unique id may be used instead of OrgId on buckets
    Default: ""
  ImageBuilderExistingSubnetId:
    Type: String
    Default: ""
    Description: Must have Internet Access, will create if not provided
  ImageBuilderExistingVpcId:
    Type: String
    Default: ""
    Description: Must have Internet Access, will create if not provided
  ImageBuilderVpcCIDR:
    Description: IP range (CIDR notation) for new VPC if needed
    Type: String
    Default: "10.0.0.0/24"
  ImageBuilderPublicSubnetCIDR:
    Description: IP range (CIDR notation) for subnet in new VPC if needed
    Type: String
    Default: "10.0.0.0/28"

Resources:
  DeployBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${Prefix}carve-deploy-bucket-${AWS::AccountId}-${AWS::Region}"
      AccessControl: Private
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: 'AES256'

  IMAGETAG:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/${Prefix}carve-resources/ecr-tag"
      Type: String
      Value: "0.0"
      Description: Version of carve image in ECR

  ECR: 
    Type: AWS::ECR::Repository
    Properties: 
      RepositoryName: !Sub "${Prefix}carve-repository"
      EncryptionConfiguration:
        EncryptionType: AES256
      ImageScanningConfiguration: 
        ScanOnPush: "true"
      LifecyclePolicy:
        LifecyclePolicyText: |
          {
            "rules": [
            {
              "rulePriority": 1,
              "description": "Only keep 4 images",
              "selection": {
                "tagStatus": "any",
                "countType": "imageCountMoreThan",
                "countNumber": 4
              },
              "action": { "type": "expire" }
            }]
          }
      RepositoryPolicyText: 
        Version: "2012-10-17"
        Statement: 
          - 
            Sid: PipelineControl
            Effect: Allow
            Principal: 
              AWS: !GetAtt 'CarvePipelineRole.Arn'
            Action: 
              - "ecr:*"
          - 
            Sid: RootControl
            Effect: Allow
            Principal: 
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action: 
              - "ecr:*"
          # -
          #   Sid: "CrossAccountPermission"
          #   Effect: "Allow"
          #   Action: 
          #     - "ecr:BatchGetImage"
          #     - "ecr:GetDownloadUrlForLayer"
          #   Principal: 
          #     AWS: "*"
          #   Condition:
          #     StringEquals:
          #       aws:PrincipalOrgID: !Ref OrgId

  CarvePipelineRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${Prefix}carve-deploy-pipeline
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codepipeline.amazonaws.com
                - cloudformation.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CodePipelineServiceRole
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: CloudWatchLogsPolicy
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:PutRetentionPolicy
                  - logs:DeleteLogGroup
                Resource:
                  - '*'
              - Effect: Allow
                Action:
                  - codebuild:StartBuild
                  - codebuild:BatchGetBuilds
                Resource:
                  - !Sub 'arn:aws:codebuild:${AWS::Region}:${AWS::AccountId}:project/CarveCodeBuild'
              - Effect: Allow
                Action:
                  - '*'
                Resource:
                  - '*'

  CarveDeploymentPipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: CarveDeploymentPipeline
      RoleArn: !GetAtt 'CarvePipelineRole.Arn'
      RestartExecutionOnUpdate: true
      ArtifactStore:
        Location: !Ref 'DeployBucket'
        Type: S3
      Stages:
        - Name: CarveSource
          Actions:
            - Name: SourceAction
              Namespace: github_vars
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Provider: GitHub
                Version: 1
              OutputArtifacts:
                - Name: GithubRepo
              Region: !Ref 'AWS::Region'
              Configuration:
                Owner: SPSCommerce
                Repo: carve
                Branch: dev
                OAuthToken: !Sub '{{resolve:secretsmanager:${GitHubOAUTHTokenASMPath}:SecretString:token}}'

        # - Name: UpdatePipeline
        #   Actions:
        #     - Name: update-pipeline
        #       ActionTypeId:
        #         Category: Deploy
        #         Owner: AWS
        #         Provider: CloudFormation
        #         Version: 1
        #       Configuration:
        #         ChangeSetName: pipeline-changeset
        #         ActionMode: CREATE_UPDATE
        #         Capabilities: CAPABILITY_NAMED_IAM,CAPABILITY_AUTO_EXPAND
        #         RoleArn: !GetAtt 'CarvePipelineRole.Arn'
        #         StackName: !Ref "AWS::StackName"
        #         TemplatePath: GithubRepo::deployment/codepipeline/carve-pipeline.cfn.yml
        #         ParameterOverrides: !Sub '{"DeployBucket": "${DeployBucket}", "OrgId": "${OrgId}", "UniqueId": "${UniqueId}", "RootOU": "${RootOU}", "Prefix": "${Prefix}", "GitHubOAUTHTokenASMPath": "${GitHubOAUTHTokenASMPath}", "ImageBuilderExistingSubnetId": "${ImageBuilderExistingSubnetId}", "ImageBuilderExistingVpcId": "${ImageBuilderExistingVpcId}", "ImageBuilderVpcCIDR": "${ImageBuilderVpcCIDR}", "ImageBuilderPublicSubnetCIDR": "${ImageBuilderPublicSubnetCIDR}"}'
        #       OutputArtifacts: []
        #       InputArtifacts:
        #         - Name: GithubRepo

        - Name: PackageLambda
          Actions:
            - Name: carve-lambda-packaging
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              InputArtifacts:
                - Name: GithubRepo
              Region: !Ref 'AWS::Region'
              Configuration:
                ProjectName: !Ref 'CarveCodeBuild'
                EnvironmentVariables: '[{"name":"GITSHA","value":"#{github_vars.CommitId}","type":"PLAINTEXT"}]'

        - Name: CarveCoreDeploy
          Actions:
            - Name: carve-core-stack
              RunOrder: 1
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: 1
              Configuration:
                ChangeSetName: pipeline-changeset
                ActionMode: CREATE_UPDATE
                Capabilities: CAPABILITY_NAMED_IAM,CAPABILITY_AUTO_EXPAND
                RoleArn: !GetAtt 'CarvePipelineRole.Arn'
                StackName: !Sub '${Prefix}carve-core'
                TemplatePath: GithubRepo::deployment/carve-core.cfn.yml
                ParameterOverrides: !Sub '{"GITSHA":"#{github_vars.CommitId}","Prefix":"${Prefix}","OrgId":"${OrgId}","UniqueId":"${UniqueId}","CodeBucket":"${DeployBucket}","IMAGETAG":"${IMAGETAG}","ECR":"${ECR}"}'
              OutputArtifacts: []
              InputArtifacts:
                - Name: GithubRepo
                                
        - Name: PrepManagedDeployments
          Actions:
            - Name: ec2-image-builder-pipeline
              RunOrder: 1
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: 1
              Configuration:
                ChangeSetName: pipeline-changeset
                ActionMode: CREATE_UPDATE
                Capabilities: CAPABILITY_NAMED_IAM
                RoleArn: !GetAtt 'CarvePipelineRole.Arn'
                StackName: !Sub '${Prefix}carve-image-builder-pipeline'
                TemplatePath: GithubRepo::deployment/codepipeline/carve-pipeline-image-builder.cfn.yml
                ParameterOverrides: !Sub '{"ExistingSubnetId":"${ImageBuilderExistingSubnetId}","ExistingVpcId":"${ImageBuilderExistingVpcId}","VpcCIDR":"${ImageBuilderVpcCIDR}","PublicSubnetCIDR":"${ImageBuilderPublicSubnetCIDR}","Prefix":"${Prefix}","OrgId":"${OrgId}","UniqueId":"${UniqueId}","DeployBucket":"${DeployBucket}"}'
              OutputArtifacts: []
              InputArtifacts:
                - Name: GithubRepo

            - Name: update-s3-notification
              ActionTypeId:
                Category: Invoke
                Owner: AWS
                Provider: Lambda
                Version: '1'
              RunOrder: 1
              Configuration:
                FunctionName: !Sub "${Prefix}carve-core"
                UserParameters: BucketNotification
              OutputArtifacts: []
              InputArtifacts: []
              Region: !Ref 'AWS::Region'

            - Name: update-carve-managed-resources
              ActionTypeId:
                Category: Invoke
                Owner: AWS
                Provider: Lambda
                Version: '1'
              RunOrder: 2
              Configuration:
                FunctionName: !Sub "${Prefix}carve-core"
                UserParameters: UpdateManagedStacks
              OutputArtifacts: []
              InputArtifacts: []
              Region: !Ref 'AWS::Region'

  CarveCodeBuild:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Name: CarveCodeBuild
      ServiceRole: !GetAtt 'CarveCodeBuildRole.Arn'
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/amazonlinux2-x86_64-standard:3.0
        PrivilegedMode: true
        EnvironmentVariables:
          - Name: DEPLOYMENT_BUCKET
            Value: !Ref 'DeployBucket'
          - Name: GIT_TOKEN
            Value: !Ref 'GitHubOAUTHTokenASMPath'
          - Name: IMAGETAG
            Value: !Ref 'IMAGETAG'
          - Name: ECR
            Value: !Ref ECR
      Source:
        Type: CODEPIPELINE
        BuildSpec: deployment/codepipeline/buildspec.yml
      TimeoutInMinutes: 5
      Tags:
        - Key: GitSHA
          Value: '0'

  CarveCodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${Prefix}carve-deploy-codebuild
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CodeBuildServiceRoleV2
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: CloudWatchLogsPolicy
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - '*'
              - Sid: DeployPolicy
                Effect: Allow
                Action:
                  - ssm:*
                  - secretsmanager:*
                  - kms:Decrypt
                Resource:
                  - '*'
              - Sid: S3Policy
                Effect: Allow
                Action:
                  - s3:*
                Resource:
                  - !Sub "arn:aws:s3:::${DeployBucket}"
                  - !Sub "arn:aws:s3:::${DeployBucket}/*"
              - Sid: iampolicy
                Effect: Allow
                Action:
                  - iam:PassRole
                Resource:
                  - '*'