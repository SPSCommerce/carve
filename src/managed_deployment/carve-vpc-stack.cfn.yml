AWSTemplateFormatVersion: '2010-09-09'
Description: Carve VPC Testing Beacons

Parameters:
  VpcId:
    Type: String
    Description: VPC ID in which the beacons should be created
    Default: ""
  VpcSubnetIds:
    Type: String
    Description: one or more comma separated subnets in which to create beacons
    Default: ""
  Prefix:
    Type: String
    Description: "Prefix carve AWS resources and stacknames with this"
    Default: ""
  ImageId:
    Type: String
    Description: The ImageId from the Carve imagebuilder
    Default: ''
  CarveSNSTopicArn:
    Type: String
    Description: Carve SNS Topic
  CarveCoreRegion:
    Type: String
    Description: Region where Carve Core is running
  MinSize:
    Description: Minimum number of instances in the ASG
    Type: Number
    Default: '0'
  MaxSize:
    Description: Maximum number of instances in the ASG
    Type: Number
    Default: '1'
  DesiredSize:
    Description: Desored number of instances in the ASG
    Type: Number
    Default: '1'
  PublicIPs:
    Description: Assign Public IPs to Instances
    Default: 'false'
    Type: 'String'

# Conditions:
#   UseOrgId: !Equals 
#     - !Ref "UniqueId"
#     - !Ref ""

Resources:
  BridgeFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${Prefix}carve-bridge-${VpcId}'
      Description: Bridge ASG events to go across accounts and regions with SNS
      Handler: index.lambda_handler
      Role: !GetAtt CarveLambdaRole.Arn
      Runtime: python3.8
      Timeout: 20
      MemorySize: 128
      Code: 
        ZipFile: !Sub |
          import boto3, os, json
          def lambda_handler(event, context):
              print(event)
              if 'source' in event:
                  if event['source'] == 'aws.autoscaling':
                      client = boto3.client('sns', region_name="${CarveCoreRegion}")
                      response = client.publish(
                          TopicArn="${CarveSNSTopicArn}",
                          Message=json.dumps(event))

  SubnetFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: CarveSubnetFunction
      Description: Continuous AWS Route Verification Engine
      Handler: index.lambda_handler
      Role: !GetAtt CarveLambdaRole.Arn
      Runtime: python3.8
      Timeout: 20
      MemorySize: 128
      Environment:
        Variables:
          VpcSubnetIds: !Ref VpcSubnetIds
          VpcId: !Ref VpcId
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
        SubnetIds: !Split [ ",", !Ref VpcSubnetIds ]
      Code: 
        ZipFile: "print('error injecting code at deploy time')"

  CarveLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: "Allow"
          Principal:
            Service:
              - "lambda.amazonaws.com"
          Action:
            - "sts:AssumeRole"
      Policies:
        - PolicyName: CarveSNS
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "sns:Publish"
                Resource: !Ref CarveSNSTopicArn


  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VpcId
      GroupDescription: Carve Lambda Egress

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    CreationPolicy:
      ResourceSignal:
        Timeout: PT5M
        Count: !Ref MinSize
    Properties:
      AutoScalingGroupName: !Sub ${Prefix}carve-beacon-asg-${VpcId}
      LaunchConfigurationName: !Ref LaunchConfig
      VPCZoneIdentifier: !Split [ ",", !Ref VpcSubnetIds ]
      HealthCheckGracePeriod: '60'
      HealthCheckType: EC2
      MinSize: !Ref MinSize
      MaxSize: !Ref MaxSize
      MetricsCollection:
        - Granularity: 1Minute
      Tags:
        - Key: Name
          Value: !Sub ${Prefix}carve-beacon-${VpcId}
          PropagateAtLaunch: true

  LaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: !Ref PublicIPs
      SecurityGroups:
        - !Ref 'InstanceSecurityGroup'
      IamInstanceProfile: !Ref 'InstanceProfile'
      ImageId: !Ref 'ImageId'
      InstanceMonitoring: 'false'
      InstanceType: t4g.nano
      # KeyName: carve
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeType: gp2
            VolumeSize: '2'
            DeleteOnTermination: 'true'
            Encrypted: 'true'

  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VpcId
      GroupDescription: Carve EC2 ingress
      SecurityGroupIngress:
          # ingress to update beacon only from the Lambda SG
        - IpProtocol: "tcp"
          FromPort: 8008
          ToPort: 8008
          SourceSecurityGroupId: !Ref LambdaSecurityGroup
          # ingress for beacon reults only from Lambda SG
        - IpProtocol: "tcp"
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref LambdaSecurityGroup
          # ICMP from everywhere else
        - IpProtocol: icmp
          FromPort: -1
          ToPort: -1
          CidrIp: 0.0.0.0/0

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref 'InstanceRole'

  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${Prefix}carve-beacon-${VpcId}"
      Path: /
      ManagedPolicyArns:
        - !Sub arn:${AWS::Partition}:iam::aws:policy/AmazonSSMManagedInstanceCore
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: "Allow"
          Principal:
            Service:
              - "ec2.amazonaws.com"
          Action:
            - "sts:AssumeRole"

  EventInvokeLambda:
     Type: AWS::Lambda::Permission
     Properties:
       FunctionName: !Ref BridgeFunction
       Action: "lambda:InvokeFunction"
       Principal: "events.amazonaws.com"
       SourceArn: !GetAtt AsgEventRule.Arn

  AsgEventRule:
    Type: AWS::Events::Rule
    Properties:
      Description: "ASG notifications to BridgeFunction"
      EventPattern: 
        source:
          - "aws.autoscaling"
        detail-type:
          - "EC2 Instance Terminate Successful"
          - "EC2 Instance Launch Successful"
        detail:
          AutoScalingGroupName:
            - !Ref 'AutoScalingGroup'
      State: "ENABLED"
      Targets:
        - Id: "InvokeBridge"
          Arn: !GetAtt BridgeFunction.Arn

Outputs:
  AutoScalingGroup:
    Description: The name of the AutoScaling Group
    Value: !Ref 'AutoScalingGroup'

