AWSTemplateFormatVersion: '2010-09-09'
Description: Carve VPC Lambda

Parameters:
  VpcId:
    Type: "AWS::EC2::VPC::Id"
    Description: VpcId containing the VpcSubnetId
  VpcSubnetId:
    Type: "String"
    Description: Subnet for lambda to run in
    Default: "subnet-0d310df8338186b7f"
  ResourcePrefix:
    Type: String
    Description: "Prefix all carve resources with this"
    Default: ""
  BeaconTimeout:
    Type: String
    Description: Timeout in seconds for testing beacons
    Default: "1"

Resources:
  CarveFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${ResourcePrefix}carve-${VpcSubnetId}"
      Description: Continuous AWS Route Verification Engine
      Handler: index.lambda_handler
      Role: !GetAtt LambdaRole.Arn
      Runtime: python3.8
      Timeout: 20
      MemorySize: 128
      Environment:
        Variables:
          VpcSubnetId: !Ref VpcSubnetId
          VpcId: !Ref VpcId
          BeaconTimeout: !Ref BeaconTimeout
      VpcConfig :
        SecurityGroupIds:
          - !Ref SecurityGroup
        SubnetIds: 
          - !Ref VpcSubnetId
      Code: 
        ZipFile: |
          import concurrent.futures
          import os
          import time
          import urllib3

          def threaded_test(addr):
              http = urllib3.PoolManager()
              try:
                  r = http.request('GET', f'http://{addr}/up', timeout={os.environ['BeaconTimeout']})
                  if r.status == 200:
                      result = 'pass'
                  else:
                      result = 'fail'
              except:
                  result = 'fail'
              return {addr: result}

          def lambda_handler(event, context):
              if len(event) < 1:
                  print('no payload to test')
                  return None
              else:
                  print(f'testing endpoints: {event}')
              results = []
              with concurrent.futures.ThreadPoolExecutor() as executor:
                  futures = []
                  for addr in event:
                      futures.append(executor.submit(threaded_test, addr=addr))
                  for future in concurrent.futures.as_completed(futures):
                      results.append(future.result())
              print(results)
              test_result = {f"{os.environ[VpcSubnetId]}": results}
              return test_result

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: "Allow"
          Principal:
            Service:
              - "lambda.amazonaws.com"
          Action:
            - "sts:AssumeRole"

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VpcId
      GroupDescription: Carve Lambda Egress


